{
  
    
        "post0": {
            "title": "hello",
            "content": "import emoji print(emoji.emojize(&quot;Hello, World! :red_heart:&quot;)) . Hello, World! ‚ù§Ô∏è .",
            "url": "http://localhost:4100/adi_student/posts/hello",
            "relUrl": "/posts/hello",
            "date": " ‚Ä¢ Sep 11, 2024"
        }
        
    
  
    
        ,"post1": {
            "title": "Fruits",
            "content": "import tensorflow as tf from tensorflow.keras.preprocessing.image import ImageDataGenerator from tensorflow.keras.models import Sequential from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout from tensorflow.keras.optimizers import Adam . 2024-09-11 15:18:48.720257: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`. 2024-09-11 15:18:48.720757: I external/local_xla/xla/tsl/cuda/cudart_stub.cc:32] Could not find cuda drivers on your machine, GPU will not be used. 2024-09-11 15:18:48.733149: I external/local_xla/xla/tsl/cuda/cudart_stub.cc:32] Could not find cuda drivers on your machine, GPU will not be used. 2024-09-11 15:18:48.749215: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:485] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered 2024-09-11 15:18:48.767948: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:8454] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered 2024-09-11 15:18:48.774441: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1452] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered 2024-09-11 15:18:48.796444: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations. To enable the following instructions: AVX2 AVX512F AVX512_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags. 2024-09-11 15:18:50.268827: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Could not find TensorRT . # Define paths train_dir = r&#39;Documents kaggle fruits360 fruits-360_dataset fruits-360 Training&#39; test_dir = r&#39;Documents kaggle fruits360 fruits-360_dataset fruits-360 Test&#39; . # Image data generators for loading and augmenting the images train_datagen = ImageDataGenerator( rescale=1./255, shear_range=0.2, zoom_range=0.2, horizontal_flip=True ) test_datagen = ImageDataGenerator(rescale=1./255) train_generator = train_datagen.flow_from_directory( train_dir, target_size=(100, 100), batch_size=32, class_mode=&#39;categorical&#39; ) test_generator = test_datagen.flow_from_directory( test_dir, target_size=(100, 100), batch_size=32, class_mode=&#39;categorical&#39; ) . FileNotFoundError Traceback (most recent call last) Cell In[3], line 11 2 train_datagen = ImageDataGenerator( 3 rescale=1./255, 4 shear_range=0.2, 5 zoom_range=0.2, 6 horizontal_flip=True 7 ) 9 test_datagen = ImageDataGenerator(rescale=1./255) &gt; 11 train_generator = train_datagen.flow_from_directory( 12 train_dir, 13 target_size=(100, 100), 14 batch_size=32, 15 class_mode=&#39;categorical&#39; 16 ) 18 test_generator = test_datagen.flow_from_directory( 19 test_dir, 20 target_size=(100, 100), 21 batch_size=32, 22 class_mode=&#39;categorical&#39; 23 ) File ~/adi_student/venv/lib/python3.10/site-packages/keras/src/legacy/preprocessing/image.py:1138, in ImageDataGenerator.flow_from_directory(self, directory, target_size, color_mode, classes, class_mode, batch_size, shuffle, seed, save_to_dir, save_prefix, save_format, follow_links, subset, interpolation, keep_aspect_ratio) 1120 def flow_from_directory( 1121 self, 1122 directory, (...) 1136 keep_aspect_ratio=False, 1137 ): -&gt; 1138 return DirectoryIterator( 1139 directory, 1140 self, 1141 target_size=target_size, 1142 color_mode=color_mode, 1143 keep_aspect_ratio=keep_aspect_ratio, 1144 classes=classes, 1145 class_mode=class_mode, 1146 data_format=self.data_format, 1147 batch_size=batch_size, 1148 shuffle=shuffle, 1149 seed=seed, 1150 save_to_dir=save_to_dir, 1151 save_prefix=save_prefix, 1152 save_format=save_format, 1153 follow_links=follow_links, 1154 subset=subset, 1155 interpolation=interpolation, 1156 dtype=self.dtype, 1157 ) File ~/adi_student/venv/lib/python3.10/site-packages/keras/src/legacy/preprocessing/image.py:453, in DirectoryIterator.__init__(self, directory, image_data_generator, target_size, color_mode, classes, class_mode, batch_size, shuffle, seed, data_format, save_to_dir, save_prefix, save_format, follow_links, subset, interpolation, keep_aspect_ratio, dtype) 451 if not classes: 452 classes = [] --&gt; 453 for subdir in sorted(os.listdir(directory)): 454 if os.path.isdir(os.path.join(directory, subdir)): 455 classes.append(subdir) FileNotFoundError: [Errno 2] No such file or directory: &#39;Documents kaggle fruits360 fruits-360_dataset fruits-360 Training&#39; . # Building the CNN model model = Sequential([ Conv2D(32, (3, 3), activation=&#39;relu&#39;, input_shape=(100, 100, 3)), MaxPooling2D(pool_size=(2, 2)), Conv2D(64, (3, 3), activation=&#39;relu&#39;), MaxPooling2D(pool_size=(2, 2)), Conv2D(128, (3, 3), activation=&#39;relu&#39;), MaxPooling2D(pool_size=(2, 2)), Flatten(), Dense(512, activation=&#39;relu&#39;), Dropout(0.5), Dense(131, activation=&#39;softmax&#39;) # 131 classes in the dataset ]) # Compile the model model.compile(optimizer=Adam(), loss=&#39;categorical_crossentropy&#39;, metrics=[&#39;accuracy&#39;]) . # Determine steps per epoch and validation steps steps_per_epoch = train_generator.samples // train_generator.batch_size validation_steps = test_generator.samples // test_generator.batch_size . # Evaluate the model loss, accuracy = model.evaluate(test_generator) print(f&#39;Test accuracy: {accuracy * 100:.2f}%&#39;) . Found 67692 images belonging to 131 classes. Found 22688 images belonging to 131 classes. C: Users adity AppData Local Programs Python Python312 Lib site-packages keras src layers convolutional base_conv.py:107: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead. super().__init__(activity_regularizer=activity_regularizer, **kwargs) Epoch 1/15 C: Users adity AppData Local Programs Python Python312 Lib site-packages keras src trainers data_adapters py_dataset_adapter.py:121: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored. self._warn_if_super_not_called() [1m2115/2115[0m [32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ[0m[37m[0m [1m720s[0m 338ms/step - accuracy: 0.4970 - loss: 1.9714 - val_accuracy: 0.9128 - val_loss: 0.3601 Epoch 2/15 [1m 1/2115[0m [37m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ[0m [1m6:14[0m 177ms/step - accuracy: 0.8750 - loss: 0.2425 C: Users adity AppData Local Programs Python Python312 Lib contextlib.py:158: UserWarning: Your input ran out of data; interrupting training. Make sure that your dataset or generator can generate at least `steps_per_epoch * epochs` batches. You may need to use the `.repeat()` function when building your dataset. self.gen.throw(value) An error occurred: &#39;NoneType&#39; object has no attribute &#39;items&#39; [1m709/709[0m [32m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ[0m[37m[0m [1m46s[0m 65ms/step - accuracy: 0.9185 - loss: 0.3224 Test accuracy: 91.70% .",
            "url": "http://localhost:4100/adi_student/posts/fruits",
            "relUrl": "/posts/fruits",
            "date": " ‚Ä¢ Sep 10, 2024"
        }
        
    
  
    
        ,"post2": {
            "title": "Sprint 1 - Objectives",
            "content": "Issue . Project-base Learning Requirements . Each sprint there will be hacks and project-based learning requirements. It is up to the individual to develop their own plan for how they will represent work. Here are some links and tips. . All work, tangible artifacts, will be captured in personal GitHub Pages | Tools and Software Development requirements are foundational requirements for all the CompSci courses. Thus, they are shared, but listed under CSSE Projects | To obtain clarity on instructions you should start by picking a post in Sprint 1, then ask questions. | In Agile Development methodology, which we will learn throughout the course, an iteration (plans, designs, review references, coding) and questions should all be considered as part of your work. | Since iteraction and questions are part of your work, you should consider capturing and outlining iterations and questions in your blog. | Be aware, you will get more ‚ÄúPoints‚Äù if you ‚ÄúIndicate‚Äù that you are progressing on a CompSci journey. | There are very few ‚ÄúCorrect Answers‚Äù in this class! As you code, you will see that there is always more bugs and features. | . Classroom Guidelines . It will be a very bad day when you say‚Ä¶ ‚ÄúI have everything done‚Äù. This statement typically comes by students that are lacking understading. . This statement shows that the person making the statement knows very little about CompSci and the principles of iteration that are being promoted in this class. In fact, that state does not agree with Agile Development Methodologies that we will be learning in this class. . The Teacher likes behaviors that are easily viewed and interpreted as productive to CompSci learning. . Code, Code, Code. This is the process of making code and involves making plans, designs, reviewing references, asking questions and Code-Code-Coding. | No paper. We will be learning to do all work electronically. | Work Talk. A very high percentate 75%, 80% or more of your talk during class should be code, code, code talk. | Ears that can listen. 100% of time you should be available for discussion. Covered or plugged in ears restricts hearing. | Hands that can code. The primary coding device is assumed to be your laptop! Sprint 1 will be focused on laptop importance. | . Read Learning Habits Table to understand how behaviors will impact grading. .",
            "url": "http://localhost:4100/adi_student/2024/08/21/sprint1_plan_IPYNB_2_.html",
            "relUrl": "/2024/08/21/sprint1_plan_IPYNB_2_.html",
            "date": " ‚Ä¢ Aug 21, 2024"
        }
        
    
  
    
        ,"post3": {
            "title": "Tool Hacks",
            "content": "Tools Installation Hack . Objective: Understand the basics of setting up a development environment and the tools required. . Shell Commands . Take note and describe the type of shell commands you are using through Terminal in this installation procedure. This is specific to your machine. Examples: wsl, cd, git, apt, brew, etc. | . | . Version Control . In the development process, developers use version control. Annotate in your notes what you have learned about version control during this setup process. How are the files from GitHub placed on your local machine? How do you navigate to those files? | How are the files updated in GitHub? How do you navigate to those files? | How would you update your template of the student_2025 repository? How would you make it more applicable to your specific course? | . | . Localhost vs. Deployed Server . Put into words the difference between viewing GitHub Pages running on your localhost machine versus running on a deployed server. What is the localhost URL for your project? Can anyone else see what you see? | What is the GitHub Pages URL for your project? Can anyone else see what you see? | . | . DNS and GitHub Pages . DNS is the address manager for the internet. Reflect on the following questions: Is there a domain on your GitHub Pages? | Is the URL for your GitHub Pages different from your neighbors‚Äô URLs? Did you change the URL? If so, when? | . | . Prepare for Pair Showcase (GitHub) . By answering question in this section of hacks you will gain a deeper understanding of the tools and processes involved in setting up and managing a development environment, version control, and deploying a website. . . Prepare a 1-2 minute summary on the questions related to tools. . . Tools Verification Hacks . Objective: Verify that the tools installed are working correctly, and each student can demonstrate an understanding of basic usage. . Verify Installation . It is important that you resolve tool issues immediately. These are the foundations for 24 weeks for CSSE and 36 weeks for CSP and CSA. . Check Tool Functionality: Ensure the tools installed in Tools Setup are working correctly using the provided scripts and outputs. | Run Basic Commands: Execute basic commands for each tool from the terminal (e.g., git --version, ruby --version, python --version, etc.). | Document Issues and Resolutions: Record any issues encountered and the strategies and verifications you performed to resolve them. | . Prepare for Pair Showcase (Tool Verification) . Develop a student view to verify tool installation with the Teacher. You and your pair should share the same validation procedures, but each individual needs to show those procedures running on their personal hardware environment. . Verification Discussion: Be prepared to discuss outputs from shell scripts during verification. | Comment Code Cells: Add comments to code cells to remember and discuss how these verifications work. | Live Reviews: Live reviews are subject to Teacher opinion unless you show indisputable command through vocabulary and technical accuracy. | . GitHub Usage with VSCode . During the tools and installation process, you are expected to become familiar with VSCode to GitHub operations. By the end of this project, it is expected that you will have a minimum of 5 significant commits. . Perform Basic Operations with GitHub Integration in VSCode . Use GitHub with VSCode frequently. Lots of small, iterative commits are recommended. . Commit: Save changes to your local repository. | VSCode Sync (Push): Upload your local commits to the remote repository on GitHub. | Pull: Download changes from the remote repository to your local repository. | . Prepare for Pair Showcase (GitHub) . Prepare a 1-minute summary on GitHub Usage. This should focus on GitLens VSCode extension and an interactive overview of the pair‚Äôs history. . Show Commits: Display the history of changes made to the repository using GitLens-&gt;Commits. | Show Contributors: Highlight the individuals who have contributed to the repository using GitLens-&gt;Contributors. | . Brief Definitions . Git: A distributed version control system that allows multiple developers to work on a project simultaneously without overwriting each other‚Äôs changes. | GitLens: A powerful extension for VSCode that provides insights into Git repositories. It helps visualize code authorship, track changes, and understand the history and evolution of a codebase. | . By completing these tasks, you will ensure that your development environment is correctly set up and that you are proficient in using essential tools and GitHub integration. . . Prepare a 2 minute summary on Tools Verification and GitHub usage accomplishments. . . Tool Play with JavaScript . Objective: Use your tools installation to learn JavaScript, create dynamic web content, and understand that there are many ways to solve the same problem (coding styles). . JavaScript Ideation . Using ideas and hints from the Tool Play lesson, start the ideation process in Jupyter Notebooks to define your future index.md home page. . Ideation in the course starts in Jupyter Notebooks. Follow these steps: . Create an HTML File: Start with an HTML file that includes a container element. | Enhance with CSS: Use CSS to style your HTML elements. | Modify with JavaScript: Use JavaScript to dynamically modify content within the HTML container. | Vocabulary Note: Modifying an HTML container is often referred to as modifying the DOM (Document Object Model). The term ‚ÄúDOM‚Äù will be used frequently in the course and is associated with the ‚Äúdocument.‚Äù prefix used in commands like document.createElement. . Update index.md Home Page . Transition from ideation to designing your own home pages. As you work with your pair, you should learn similar coding styles, but your end product should be unique. . Integrate JavaScript: Incorporate your JavaScript code into your GitHub Pages project. | Verify Display: Ensure that the dynamic content is displayed correctly on both localhost and the deployed server. | Document Challenges: Blog about any challenges faced and how you overcame them. | Prepare a 2-Minute Summary on Your index.md . Demo the Pages: Show the live pages on both localhost and the deployed server. | Show the Code: Walk through the JavaScript code that modifies the DOM. | Jupyter Ideation Process: Explain the ideation process documented in your Jupyter Notebooks. | Coding Style Question: Be prepared to answer the question, ‚ÄúHow could you use another coding style to change your loop?‚Äù For example, if you used a for loop, explain how you could use forEach or another iteration method. | By completing these ‚ÄúHacks,‚Äù you will gain a deeper understanding of the tools and processes involved in setting up and managing a development environment, verifying tool installations, and applying JavaScript to create dynamic web content. . . Prepare a 2-minute summary on your Home Page coding accomplishments. . .",
            "url": "http://localhost:4100/adi_student/devops/hacks",
            "relUrl": "/devops/hacks",
            "date": " ‚Ä¢ Aug 23, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "Tools Play using JavaScript",
            "content": "GitHub Pages Coding Introduction . Building the entire frontend GitHub Pages web application requires knowledge of HTML, CSS, and JavaScript. GitHub Pages has built-in support for an additional content language called Markdown, which is a shorthand complement to HTML. Markdown is focused on creating static content. . HTML is responsible for the content | Markdown is a shorthand way of writing content | CSS adds styling to the web page content | JavaScript adds functionality and interactivity | . In GitHub Pages, Jekyll serves as the build framework. It takes our choice of theme specified in the _config.yml file, along with our Markdown, HTML, and notebook files, to construct a complete static website. A significant portion of the frontend design work has already been done for users through the selection and use of a theme; this greatly reduces the need to code in CSS. . Jekyll converts Markdown (.md) files into HTML. Behind the scenes of GitHub Pages, Jekyll and the Liquid programming language build and programmatically construct each Markdown file into a specific web page. Markdown provides a straightforward way to start with GitHub Pages development. In a Markdown file, you can exclusively use Markdown syntax or incorporate HTML, CSS, and JavaScript based on your expertise and experience. . What is Static Content? . Static content refers to web pages that are delivered to the user‚Äôs browser exactly as stored, without any server-side processing or dynamic content generation. This means the content remains the same for every user and does not change unless the source files are manually updated. Static websites are typically faster, more secure, and easier to deploy compared to dynamic websites, which require server-side processing to generate content on-the-fly. . Adding Dynamics to GitHub Pages . Through the use of JavaScript and the fetch of data through APIs (backed by servers), developers are able to customize GitHub Pages to support data change. As we explore the portfolio_2025, we will see JavaScript games, login systems, and data that appear very dynamic. . Nighthawk Pages . While this introduction covers the basics of creating static content with GitHub Pages, our classroom GitHub Pages will delve deeper into more advanced topics. We will explore how to integrate dynamic content, use advanced JavaScript techniques, and leverage APIs to create more interactive and engaging web pages. . . Markdown to HTML . This notebook will describe and show code fragments to help get the student developer ready for coding and committing changes to GitHub. . All the documents we have been discussing to this point in time were primarily written as ipynb documents that were converted to md. Each md file is converted to an html file. . Since HTML, CSS, and JavaScript are the only files understood by the common web browsers, you will see the _site directory being constructed and updated every time we run make. Those primary browser files and content (ie images) are the only file types that end up in the site directory. . GitHub Pages index.md . In GitHub Pages you can define code in Markdown. The index.md uses markdown to define a page about CompSci courses at Del Norte High School. This pages is entirely markdoown and contains static references to images, that are in the images directory. . Markdown fragment. . Here is a small markdown fragment that was a part of the index.md at one time. . markdown ## Build your Home Page here # Investing in your Technical Future &gt; Explore the Computer Science Pathway at Del Norte High School and invest in your technical skills. All Del Norte CompSci classes are designed to provide a real-world development experience. Class time includes tech talks (lectures), peer collaboration, communication with teachers, critical thinking while coding, and creativity in projects. Grading is focused on time invested, participation with peers, and engagement in learning. - Introduction to concepts and requirements by the teacher - Project-based learning with teacher support - Peer communication and collaboration - Coding, developer operations, and critical thinking - Creativity, research, and utilizing ChatGPT - Class work with approximately 2-3 hours of homework per week ![csse](/adi_student//images/ccr.png) ### HTML conversion. This HTML **conversion** of the Markdown fragment. This is produced by GitHub Pages using Jekyll, by running the make command. This is the process of programmatically converting a Markdown to HTML. You can find all the converted md to html files in the _site directory, they get updated each time you type make. html &lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; ## Build your Home Page here # Investing in your Technical Future &lt;span class=&quot;gt&quot;&gt; &amp;gt; Explore the Computer Science Pathway at Del Norte High School and invest in your technical skills. All Del Norte CompSci classes are designed to provide a real-world development experience. Class time includes tech talks (lectures), peer collaboration, communication with teachers, critical thinking while coding, and creativity in projects. Grading is focused on time invested, participation with peers, and engagement in learning.&lt;/span&gt; &lt;span class=&quot;p&quot;&gt; -&lt;/span&gt; Introduction to concepts and requirements by the teacher &lt;span class=&quot;p&quot;&gt; -&lt;/span&gt; Project-based learning with teacher support &lt;span class=&quot;p&quot;&gt; -&lt;/span&gt; Peer communication and collaboration &lt;span class=&quot;p&quot;&gt; -&lt;/span&gt; Coding, developer operations, and critical thinking &lt;span class=&quot;p&quot;&gt; -&lt;/span&gt; Creativity, research, and utilizing ChatGPT &lt;span class=&quot;p&quot;&gt; -&lt;/span&gt; Class work with approximately 2-3 hours of homework per week !&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;csse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;/teacher/images/ccr.png&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;/div&gt; . . Images . In GitHub Pages, you can insert images in HTML or Markdown. . There are many image examples using markdown in the index.md file, this are reading content from the images directory. . The Teacher finds the HTML &lt;img&gt; easier to work with for embedding links when it is necessary to control size. This example shows Markdown syntax for embedding images, but students can also use HTML syntax with the tag. . See index.md for ![]() syntax for images, or reference Markdown images . | Or use ‚Äúimg‚Äù tage referencing HTML images . | . Becoming a Web Developer . Let‚Äôs say we wanted to share the key languages we are studying in a blog article about tools and equipment. Notice that the only the first image is in this example and it is kind of big. So, I abandoned this idea. But there is code commented out in this cell that is starting to look better. Perhaps you want to give it a try. . HTML - HyperText Markup Language 5 officially introduced in 2014 | CSS - Cascading Style Sheets is somewhere between CSS2.1 in 2011 and CSS3 today | JavaScript - Programming language for web development, ES11 introduced in 2020 | Markdown - Started in 2004. There is a flavor called GitHub flavored Markdown (GFM) | . Living in the World . Let‚Äôs say someone in CompSci wants to share places they have lived on their index.md page. Notice the size and orientation is a 1x4 grid through CSS. . Tag rules for GitHub Pages . As we code and use chat bots to assist, we need to know certain Tag rules for code in GitHub pages. Remember these as otherwise you may run into unpredictable issues. . Not necessary tags. GitHub Pages does not require a &lt;head&gt;, &lt;body&gt;, or &lt;html&gt; tags. All markdown files are generated and those tags are added on conversion from md to html. . | Required tags. Notice the usage of the &lt;style&gt; tag, later we will see usage and need of the &lt;script&gt; tag. . | . California - forever . Oregon - 9 years . England - 2 years . Hawaii - 2 years . Saying Hello . Somebody had an idea that we could make a phrase caption for how to say hello added to ‚ÄúLiving in the World‚Äù idea for my index.md page. . Think about adding option, how many lines of code would you need to add? Once you think about that question you should think about, How can I do that in a coding way? Here are some thoughts‚Ä¶ . We have learned from Shell Script Linux Help, we can make our original ideas more efficient | As a coder, you must believe that there is a coding solution, like JavaScript, helps make HTML and CSS more efficient. | Development Log . Started with outline of what needed to be accomlished (see included Javascript) | After creating this outline, copilot to finish the code. It took 2 tries for ChatGPT to get it right wikipedia naming write using variables. | Then between chat and the Teacher serveral iterations were made to make it friendly to a new coder and more uniform in organization of data on screen. | . &lt;style&gt; // Style looks pretty compact, but it has a repeat 4, what if we wanted it dynamic &lt;/style&gt; &lt;!-- This is orignal grid_container class, but now we are adding an id for JavaScript --&gt; &lt;div class &quot;grid_container&quot; id=&quot;grid_container&quot;&gt; &lt;!-- We are hoping to make the insides with a JavaScript object --&gt; &lt;/div&gt; &lt;script&gt; // 1. Make a connection to the HTML container var container = document.getElementById(&quot;grid_container&quot;); // 2. Define a Javascript object for our data var living_in_the_world = { {&quot;flag&quot;: &quot;Flag_of_California&quot;, &quot;time_lived&quot;: &quot;Forever&quot;, &quot;greeting&quot;: &quot;Hey&quot;}, {&quot;flag&quot;: &quot;Flag_of_Oregon&quot;, &quot;time_lived&quot;: &quot;9-years&quot;, &quot;greeting&quot;: &quot;Hello&quot;}, {&quot;flag&quot;: &quot;Flag_of_England&quot;, &quot;time_lived&quot;: &quot;2-years&quot;, &quot;greeting&quot;: &quot;Alright mate&quot;}, {&quot;flag&quot;: &quot;Flag_of_Oregon&quot;, &quot;time_lived&quot;: &quot;2-years&quot;, &quot;greeting&quot;: &quot;Aloha&quot;}, }; // 3a. Consider how to update style count for size of container // 3b. Build a grid items inside of our container for each row of data for (var row of living_in_the_world) { // make a &quot;div&quot; with &quot;class grid_item &quot;div&quot; for each row // add &quot;img&quot; tag and &quot;p&quot; tags for data } &lt;/script&gt; . %%html &lt;style&gt; /* Style looks pretty compact, trace grid-container and grid-item in the code */ .grid-container { display: grid; grid-template-columns: repeat(auto-fill, minmax(150px, 1fr)); /* Dynamic columns */ gap: 10px; } .grid-item { text-align: center; } .grid-item img { width: 100%; height: 100px; /* Fixed height for uniformity */ object-fit: contain; /* Ensure the image fits within the fixed height */ } .grid-item p { margin: 5px 0; /* Add some margin for spacing */ } &lt;/style&gt; &lt;!-- This grid_container class is for the CSS styling, the id is for JavaScript connection --&gt; &lt;div class=&quot;grid-container&quot; id=&quot;grid_container&quot;&gt; &lt;!-- content will be added here by JavaScript --&gt; &lt;/div&gt; &lt;script&gt; // 1. Make a connection to the HTML container defined in the HTML div var container = document.getElementById(&quot;grid_container&quot;); // This container connects to the HTML div // 2. Define a JavaScript object for our http source and our data rows for the Living in the World grid var http_source = &quot;https://upload.wikimedia.org/wikipedia/commons/&quot;; var living_in_the_world = [ {&quot;flag&quot;: &quot;0/01/Flag_of_California.svg&quot;, &quot;greeting&quot;: &quot;Hey&quot;, &quot;description&quot;: &quot;California - forever&quot;}, {&quot;flag&quot;: &quot;b/b9/Flag_of_Oregon.svg&quot;, &quot;greeting&quot;: &quot;Hi&quot;, &quot;description&quot;: &quot;Oregon - 9 years&quot;}, {&quot;flag&quot;: &quot;b/be/Flag_of_England.svg&quot;, &quot;greeting&quot;: &quot;Alright mate&quot;, &quot;description&quot;: &quot;England - 2 years&quot;}, {&quot;flag&quot;: &quot;e/ef/Flag_of_Hawaii.svg&quot;, &quot;greeting&quot;: &quot;Aloha&quot;, &quot;description&quot;: &quot;Hawaii - 2 years&quot;}, ]; // 3a. Consider how to update style count for size of container // The grid-template-columns has been defined as dynamic with auto-fill and minmax // 3b. Build grid items inside of our container for each row of data for (const location of living_in_the_world) { // Create a &quot;div&quot; with &quot;class grid-item&quot; for each row var gridItem = document.createElement(&quot;div&quot;); gridItem.className = &quot;grid-item&quot;; // This class name connects the gridItem to the CSS style elements // Add &quot;img&quot; HTML tag for the flag var img = document.createElement(&quot;img&quot;); img.src = http_source + location.flag; // concatenate the source and flag img.alt = location.flag + &quot; Flag&quot;; // add alt text for accessibility // Add &quot;p&quot; HTML tag for the description var description = document.createElement(&quot;p&quot;); description.textContent = location.description; // extract the description // Add &quot;p&quot; HTML tag for the greeting var greeting = document.createElement(&quot;p&quot;); greeting.textContent = location.greeting; // extract the greeting // Append img and p HTML tags to the grid item DIV gridItem.appendChild(img); gridItem.appendChild(description); gridItem.appendChild(greeting); // Append the grid item DIV to the container DIV container.appendChild(gridItem); } &lt;/script&gt; . Multiple Ways of Coding . The script tag in the running example above contains JavaScript. This JavaScript is written in a style that is similar to other languages like Java and Python, making it easier for developers familiar with those languages to understand. However, be aware that code can be written in many styles, some of which may not be as friendly to the syntax of other coding languages. . JavaScript is unique in its style and html usages that are shown in this example. The interaction of JavaScript with these tags and its operation within a web browser is its unique purpose. As JavaScript and other languages develop their niches, they start to vary in aspects like syntax. . A pure JavaScript programmer might write the script section differently. Therefore, when you watch a coding video or request code from a chatbot, the code might vary, but the different coding styles and syntax changes essentially achieve the same result. . Connecting to the HTML Container: The container declaration connects to the HTML element with the ID grid_container. | . | Defining Data: The http_source holds the base URL for the flag images. | The living_in_the_world array contains objects representing different locations, each with a flag URL, greeting, and description. | . | Building Grid Items: The loop iterates over each location in the living_in_the_world array. | For each location, a new div element with the class grid-item is created. | An img element is created for the flag, with the src attribute set to data from the living_in_the_world array. | Two p elements are created for the description and greeting. | These elements are appended to the gridItem div, which is then appended to the container div. | . | The code and examples showcase the use of modern JavaScript features to create a dynamic grid of items based on an array of data. . Modern JavaScript Features . This example demonstrates several modern JavaScript features that are prevalent in contemporary JavaScript codebases. . const for Variable Declarations: The const keyword is used for variable declarations, indicating that the variable‚Äôs value will not change throughout the script. This is useful for defining constants and ensuring immutability. | Arrow Functions: Arrow functions are used in the forEach loop. They provide a concise syntax for writing functions and are popular in functional programming styles. | Template Literals: Template literals are used for string concatenation. They allow for embedding expressions within strings using backticks (`) and ${} syntax. This can make the code more readable and easier to write by keeping the evaluation and the string in close proximity, reducing the cognitive load on the developer. | . &lt;script&gt; // 1. Make a connection to the HTML container defined in the HTML div const container = document.getElementById(&quot;grid_container&quot;); // This container connects to the HTML div // 2. Define a JavaScript object for our http source and our data rows for the Living in the World grid const http_source = &quot;https://upload.wikimedia.org/wikipedia/commons/&quot;; const living_in_the_world = [ {flag: &quot;0/01/Flag_of_California.svg&quot;, greeting: &quot;Hey&quot;, description: &quot;California - forever&quot;}, {flag: &quot;b/b9/Flag_of_Oregon.svg&quot;, greeting: &quot;Hi&quot;, description: &quot;Oregon - 9 years&quot;}, {flag: &quot;b/be/Flag_of_England.svg&quot;, greeting: &quot;Alright mate&quot;, description: &quot;England - 2 years&quot;}, {flag: &quot;e/ef/Flag_of_Hawaii.svg&quot;, greeting: &quot;Aloha&quot;, description: &quot;Hawaii - 2 years&quot;}, ]; // 3a. Consider how to update style count for size of container // The grid-template-columns has been defined as dynamic with auto-fill and minmax // 3b. Build grid items inside of our container for each row of data living_in_the_world.forEach(location =&gt; { // Create a &quot;div&quot; with &quot;class grid-item&quot; for each row const gridItem = document.createElement(&quot;div&quot;); gridItem.className = &quot;grid-item&quot;; // This class name connects the gridItem to the CSS style elements // Add &quot;img&quot; HTML tag for the flag const img = document.createElement(&quot;img&quot;); img.src = `${http_source}${location.flag}`; // concatenate the source and flag img.alt = `${location.flag} Flag`; // add alt text for accessibility // Add &quot;p&quot; HTML tag for the description const description = document.createElement(&quot;p&quot;); description.textContent = location.description; // extract the description // Add &quot;p&quot; HTML tag for the greeting const greeting = document.createElement(&quot;p&quot;); greeting.textContent = location.greeting; // extract the greeting // Append img and p HTML tags to the grid item DIV gridItem.appendChild(img); gridItem.appendChild(description); gridItem.appendChild(greeting); // Append the grid item DIV to the container DIV container.appendChild(gridItem); }); &lt;/script&gt; . Classic for Loop Example . This example contains a classic for loop that is common to almost every programming language. It demonstrates a traditional approach to iterating over an array and building HTML elements dynamically. . Three-Part For Loop: Uses the three-part for loop structure: initialization of the index (i), loop comparison, and index increment. | Variable Declaration with let: Uses let to define i, a variable that changes as the code logic progresses. | . &lt;script&gt; // 1. Make a connection to the HTML container defined in the HTML div const container = document.getElementById(&quot;grid_container&quot;); // This container connects to the HTML div // 2. Define a JavaScript object for our http source and our data rows for the Living in the World grid const http_source = &quot;https://upload.wikimedia.org/wikipedia/commons/&quot;; const living_in_the_world = [ {flag: &quot;0/01/Flag_of_California.svg&quot;, greeting: &quot;Hey&quot;, description: &quot;California - forever&quot;}, {flag: &quot;b/b9/Flag_of_Oregon.svg&quot;, greeting: &quot;Hi&quot;, description: &quot;Oregon - 9 years&quot;}, {flag: &quot;b/be/Flag_of_England.svg&quot;, greeting: &quot;Alright mate&quot;, description: &quot;England - 2 years&quot;}, {flag: &quot;e/ef/Flag_of_Hawaii.svg&quot;, greeting: &quot;Aloha&quot;, description: &quot;Hawaii - 2 years&quot;}, ]; // 3a. Consider how to update style count for size of container // The grid-template-columns has been defined as dynamic with auto-fill and minmax // 3b. Build grid items inside of our container for each row of data for (let i = 0; i &lt; living_in_the_world.length; i++) { const location = living_in_the_world[i]; // Create a &quot;div&quot; with &quot;class grid-item&quot; for each row const gridItem = document.createElement(&quot;div&quot;); gridItem.className = &quot;grid-item&quot;; // This class name connects the gridItem to the CSS style elements // Add &quot;img&quot; HTML tag for the flag const img = document.createElement(&quot;img&quot;); img.src = `${http_source}${location.flag}`; // concatenate the source and flag img.alt = `${location.flag} Flag`; // add alt text for accessibility // Add &quot;p&quot; HTML tag for the description const description = document.createElement(&quot;p&quot;); description.textContent = location.description; // extract the description // Add &quot;p&quot; HTML tag for the greeting const greeting = document.createElement(&quot;p&quot;); greeting.textContent = location.greeting; // extract the greeting // Append img and p HTML tags to the grid item DIV gridItem.appendChild(img); gridItem.appendChild(description); gridItem.appendChild(greeting); // Append the grid item DIV to the container DIV container.appendChild(gridItem); } &lt;/script&gt; .",
            "url": "http://localhost:4100/adi_student/devops/github/pages/play",
            "relUrl": "/devops/github/pages/play",
            "date": " ‚Ä¢ Aug 23, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "Tools Verify using Shell",
            "content": "Computers and Terminals . A brief overview of Terminal and Linux is a step on your way to becoming a Linux expert. When a computer boots up, a kernel (MacOS, Windows, Linux) is started. This kernel is the core of the operating system and manages hardware resources. Above the kernel, various applications run, including the shell and terminal, which allow users to interact with the system using a basic set of commands provided by the kernel. . Typically, casual users interact with the system through a Desktop User Interface (UI) that is started by the computer‚Äôs boot-up processes. However, to interact directly with the shell, users can run a ‚Äúterminal‚Äù application through the Desktop UI. Additionally, VS Code provides the ability to activate a ‚Äúterminal‚Äù within its editing environment, making it convenient for developers to execute commands without leaving the code editor. . In this next phase, we will use a Jupyter notebook to perform Linux commands through a terminal. The Jupyter notebook is an application that runs above the kernel, providing an interactive environment for writing and executing code, including shell commands. This setup allows us to seamlessly integrate code execution, data analysis, and documentation in one place, enhancing our productivity and learning experience. . Setup a Personal GitHub Pages Project . You will be making a personal copy of the course repository. Be sure to have a GitHub account!!! . Use the Green ‚ÄúUse this Template‚Äù button on the portfolio_2025 repository page to set up your personal GitHub Pages repository. | Create a new repository. | Fill in the dialog and select the Repository Name to be under your GitHub ID ownership. . . | After this is complete, use the Green ‚ÄúCode‚Äù button on the newly created repository page to capture your ‚ÄúProject Repo‚Äù name. | . In the next few code cells, we will run a bash (shell) script to pull a GitHub project. . Shell Script and Variables . We will ultimately run a bash (shell) script to pull a GitHub project. This next script simply sets up the necessary environment variables to tell the script the location of repository from GitHub and where to copy the output. . For now, focus on each line that begins with export. These are shell variables. Each line has a name (after the keyword export) and a value (after the equal sign). . Here is a full description: . Creates a temporary file /tmp/variables.sh to store environment variables. | Sets the project_dir variable to your home directory with a subdirectory named nighthawk. You can change nighthawk to a different name to test your git clone. | Sets the project variable to a subdirectory within project_dir named portfolio_2025. You can change portfolio_2025 to the name of your project. | Sets the project_repo variable to the URL of the GitHub repository. Change this to the project you created from the portfolio_2025 template. | . By running this script, you will prepare your environment for cloning and working on your GitHub project. This is an essential step in setting up your development environment and ensuring that all dependencies are correctly configured. . %%script bash # Dependency Variables, set to match your project directories cat &lt;&lt;EOF &gt; /tmp/variables.sh export project_dir=$HOME/nighthawk # change nighthawk to different name to test your git clone export project= $project_dir/student_2025 # change student_2025 to name of project from git clone export project_repo=&quot;https://github.com/nighthawkcoders/student_2025.git&quot; # change to project you created from portfolio_2025 template EOF . Describing the Outputs of the Variables . The next script will extract the saved variables and display their values. Here is a description of the commands: . The source command loads the variables that we saved in the /tmp/variables.sh file in the previous code cell. | The echo commands display the contents of the named variables: project_dir: The directory where your project is located. | project: The specific project directory within project_dir. | project_repo: The URL of the GitHub repository. | . | . By running this script, you can verify that the environment variables are correctly set in your development environment. If they don‚Äôt match up, go back to the previous code cell and make the necessary corrections. . %%script bash # Extract saved variables source /tmp/variables.sh # Output shown title and value variables echo &quot;Project dir: $project_dir&quot; echo &quot;Project: $project&quot; echo &quot;Repo: $project_repo&quot; . Project Setup and Analysis with Bash Scripts . The bash scripts that follow automate what was done in the Tools Installation procedures with regards to cloning a GitHub project. Doing this in a script fashion adds the following benefits: . After completing these steps, we will have notes on how to set up and verify a project. | By reviewing these commands, you will start to learn the basics of Linux. | By setting up these code cells, you will be learning how to develop automated scripts using Shell programming. | You will learn that pretty much anything we type on a computer can be automated through the use of variables and a coding language. | . Pull Code . Pull code from GitHub to your machine. This is a bash script, a sequence of commands, that will create a project directory and add the ‚Äúproject‚Äù from GitHub to the vscode directory. There is conditional logic to make sure that the clone only happens if it does not (!) exist. Here are some key elements in this code: . cd command (change directory), remember this from the terminal session. | if statements (conditional statements, called selection statements by College Board), code inside only happens if the condition is met. | . Run the script two times and you will see that the output changes. In the second run, the files exist and it impact the flow of the code. . %%script bash # Extract saved variables source /tmp/variables.sh echo &quot;Using conditional statement to create a project directory and project&quot; cd ~ # start in home directory # Conditional block to make a project directory if [ ! -d $project_dir ] then echo &quot;Directory $project_dir does not exist... making directory $project_dir&quot; mkdir -p $project_dir fi echo &quot;Directory $project_dir exists.&quot; # Conditional block to git clone a project from project_repo if [ ! -d $project ] then echo &quot;Directory $project does not exist... cloning $project_repo&quot; cd $project_dir git clone $project_repo cd ~ fi echo &quot;Directory $project exists.&quot; . Look at Files in GitHub Project . All computers contain files and directories. The clone brought more files from the cloud to your machine. Review the bash shell script, observe the commands that show and interact with files and directories. These were used during setup. . ls lists computer files in Unix and Unix-like operating systems. | cd offers a way to navigate and change the working directory. | pwd prints the working directory. | echo is used to display a line of text/string that is passed as an argument. | . %%script bash # Extract saved variables source /tmp/variables.sh echo &quot;Navigate to project, then navigate to area wwhere files were cloned&quot; cd $project pwd echo &quot;&quot; echo &quot;list top level or root of files with project pulled from github&quot; ls . Look at File List with Hidden and Long Attributes . Most Linux commands have options to enhance behavior. The enhanced listing below shows permission bits, owner of the file, size, and date. . Some useful ls flags: . -a: List all files including hidden files. | -l: List in long format. | -h: Human-readable file sizes. | -t: Sort by modification time. | -R: Reverse the order of the sort. | . ls reference . %%script bash # Extract saved variables source /tmp/variables.sh echo &quot;Navigate to project, then navigate to area wwhere files were cloned&quot; cd $project pwd echo &quot;&quot; echo &quot;list all files in long format&quot; ls -al # all files -a (hidden) in -l long listing . %%script bash # Extract saved variables source /tmp/variables.sh echo &quot;Look for posts&quot; export posts=$project/_posts # _posts inside project cd $posts # this should exist per fastpages pwd # present working directory ls -lR # list posts recursively . %%script bash # Extract saved variables source /tmp/variables.sh echo &quot;Look for notebooks&quot; export notebooks=$project/_notebooks # _notebooks is inside project cd $notebooks # this should exist per fastpages pwd # present working directory ls -lR # list notebooks recursively . %%script bash # Extract saved variables source /tmp/variables.sh echo &quot;Look for images, print working directory, list files&quot; cd $project/images # this should exist per fastpages pwd ls -lR . Look inside a Markdown File . ‚Äúcat‚Äù reads data from the file and gives its content as output . %%script bash # Extract saved variables source /tmp/variables.sh echo &quot;Navigate to project, then navigate to area wwhere files were cloned&quot; cd $project echo &quot;show the contents of README.md&quot; echo &quot;&quot; cat README.md # show contents of file, in this case markdown echo &quot;&quot; echo &quot;end of README.md&quot; . Env, Git, and GitHub . Env(ironment) is used to capture things like the path to the Code or Home directory. Git and GitHub are not only used to exchange code between individuals but are also often used to exchange code through servers, in our case for website deployment. All tools we use have behind-the-scenes relationships with the system they run on (MacOS, Windows, Linux) or a relationship with servers to which they are connected (e.g., GitHub). There is an ‚Äúenv‚Äù command in bash. There are environment files and setting files (e.g., .git/config) for Git. They both use a key/value concept. . env shows settings for your shell. | git clone sets up a directory of files. | cd $project allows the user to move inside that directory of files. | .git is a hidden directory that is used by Git to establish a relationship between the machine and the Git server on GitHub. | . %%script bash # This command has no dependencies echo &quot;Show the shell environment variables, key on left of equal value on right&quot; echo &quot;&quot; env . %%script bash # Extract saved variables source /tmp/variables.sh cd $project echo &quot;&quot; echo &quot;show the secrets of .git config file&quot; cd .git ls -l config echo &quot;&quot; echo &quot;look at config file&quot; cat config . Advanced Shell project . This example was requested by a student (Jun Lim, CSA). The request was to make a Jupyter file using bash; I adapted the request to markdown. This type of thought will have great extrapolation to coding and possibilities of using Lists, Arrays, or APIs to build user interfaces. JavaScript is a language where building HTML is very common. . To get more interesting output from the terminal, this will require using something like mdless (https://github.com/ttscoff/mdless). This enables seeing markdown in rendered format. . On Desktop Install PKG from MacPorts | In Terminal on MacOS Install ncurses | gem install mdless | . | . Output of the example is much nicer in ‚ÄúJupyter‚Äù . This is starting the process of documentation. . %%script bash # This example has an error in VSCode; it runs best on Jupyter cd /tmp file=&quot;sample.md&quot; if [ -f &quot;$file&quot; ]; then rm $file fi # Create a markdown file using tee and here document (&lt;&lt;EOF) tee -a $file &gt;/dev/null &lt;&lt;EOF # Show Generated Markdown This introductory paragraph and this line and the title above are generated using tee with the standard input (&lt;&lt;) redirection operator. - This bulleted element is still part of the tee body. EOF # Append additional lines to the markdown file using echo and redirection (&gt;&gt;) echo &quot;- This bulleted element and lines below are generated using echo with standard output (&gt;&gt;) redirection operator.&quot; &gt;&gt; $file echo &quot;- The list definition, as is, is using space to separate lines. Thus the use of commas and hyphens in output.&quot; &gt;&gt; $file # Define an array of actions and their descriptions actions=(&quot;ls,list-directory&quot; &quot;cd,change-directory&quot; &quot;pwd,present-working-directory&quot; &quot;if-then-fi,test-condition&quot; &quot;env,bash-environment-variables&quot; &quot;cat,view-file-contents&quot; &quot;tee,write-to-output&quot; &quot;echo,display-content-of-string&quot; &quot;echo_text_&gt; $file,write-content-to-file&quot; &quot;echo_text_&gt;&gt; $file,append-content-to-file&quot;) # Loop through the actions array and append each action to the markdown file for action in ${actions[@]}; do action=${action//-/ } # Convert dash to space action=${action//,/: } # Convert comma to colon action=${action//_text_/ &quot;sample text &quot; } # Convert _text_ to &quot;sample text&quot;, note escape character to avoid &quot;&quot; having meaning echo &quot; - ${action//-/ }&quot; &gt;&gt; $file # Append action to file done echo &quot;&quot; echo &quot;File listing and status&quot; ls -l $file # List file details wc $file # Show word count mdless $file # Render markdown from terminal (requires mdless installation) rm $file # Clean up temporary file . Display Shell commands help using man . The previous example used a markdown file to store a list of actions and their descriptions. This example uses the man command to generate a markdown file with descriptions of the commands. The markdown file is then displayed using mdless. . In coding, we should try to get data from the content creators instead of creating it on our own. This approach has several benefits: . Accuracy: Descriptions from man pages are authoritative and accurate, as they come directly from the documentation provided by the command‚Äôs developers. | Consistency: Automatically generating descriptions ensures consistency in formatting and terminology. | Efficiency: It saves time and effort, especially when dealing with a large number of commands. | Up-to-date Information: man pages are regularly updated with the latest information, ensuring that the descriptions are current. | . %%script bash # This example has an error in VSCode; it runs best on Jupyter cd /tmp file=&quot;sample.md&quot; if [ -f &quot;$file&quot; ]; then rm $file fi # Set locale to C to avoid locale-related errors export LC_ALL=C # Create a markdown file using tee and here document (&lt;&lt;EOF) tee -a $file &gt;/dev/null &lt;&lt;EOF # Show Generated Markdown This introductory paragraph and this line and the title above are generated using tee with the standard input (&lt;&lt;) redirection operator. - This bulleted element is still part of the tee body. EOF # Append additional lines to the markdown file using echo and redirection (&gt;&gt;) echo &quot;- This bulleted element and lines below are generated using echo with standard output (&gt;&gt;) redirection operator.&quot; &gt;&gt; $file echo &quot;- The list definition, as is, is using space to separate lines. Thus the use of commas and hyphens in output.&quot; &gt;&gt; $file # Define an array of commands commands=(&quot;ls&quot; &quot;cat&quot; &quot;tail&quot; &quot;pwd&quot; &quot;env&quot; &quot;grep&quot; &quot;awk&quot; &quot;sed&quot; &quot;curl&quot; &quot;wget&quot;) # Loop through the commands array and append each command description to the markdown file for cmd in ${commands[@]}; do description=$(man $cmd | col -b | awk &#39;/^NAME/{getline; print}&#39;) echo &quot; - $description&quot; &gt;&gt; $file done echo &quot;&quot; echo &quot;File listing and status&quot; ls -l $file # List file details wc $file # Show word count mdless $file # Render markdown from terminal (requires mdless installation) rm $file # Clean up temporary file .",
            "url": "http://localhost:4100/adi_student/devops/tools/verify",
            "relUrl": "/devops/tools/verify",
            "date": " ‚Ä¢ Aug 22, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "Tools Setup",
            "content": "Installation Hack . It is fundamental that you learn how to create your own blogging website and understand the following concepts: . Shell Commands . Take note and describe the type of shell commands you are using through Terminal in this installation procedure. This is specific to your machine. Examples: wsl, cd, git, apt, brew, etc. | . | . Version Control . In the development process, developers use version control. Annotate in your notes what you have learned about version control during this setup process. How are the files from GitHub placed on your local machine? How do you navigate to those files? | How are the files updated in GitHub? How do you navigate to those files? | How would you update your template of the student_2025 repository? How would you make it more applicable to your specific course? | . | . Localhost vs. Deployed Server . Put into words the difference between viewing GitHub Pages running on your localhost machine versus running on a deployed server. What is the localhost URL for your project? Can anyone else see what you see? | What is the GitHub Pages URL for your project? Can anyone else see what you see? | . | . DNS and GitHub Pages . DNS is the address manager for the internet. Reflect on the following questions: Is there a domain on your GitHub Pages? | Is the URL for your GitHub Pages different from your neighbors‚Äô URLs? Did you change the URL? If so, when? | . | . . By completing these ‚ÄúHacks,‚Äù you will gain a deeper understanding of the tools and processes involved in setting up and managing a development environment, version control, and deploying a website. . Terminal and Linux Shell Navigation . You are expected to identify your computer type, know its operating system, and manage folders and files effectively. . Each computer type‚ÄîWindows/WSL, MacOS, and Chromebook using KASM student workspace‚Äîprovides an option for a Terminal. . As you proceed, you will be running Linux shell commands in your Terminal. . Explore or research Linux shell commands such as cd, pwd, mkdir, etc. | Click for Linux navigation commands. | Use Google or chat tools for questions like ‚ÄúWhat is Linux cd?‚Äù | Learn how to open a Terminal in your workspace. | . Be mindful that different workspaces will have distinct setup and installation requirements. However, after the initial setup, we will aim to make our workspaces as similar as possible. . . Windows Subsystem for Linux (WSL) Setup . WSL provides a Linux terminal environment on a Windows computer. Linux is an open-source operating system with many distributions, such as Ubuntu Linux, which we will install and use. Once we install Ubuntu Linux, we will be able to run Linux/Unix commands. Ubuntu includes a package manager called apt that allows us to add developer packages and libraries to the machine. . To get started, download WSL and Ubuntu 22.04: . Open PowerShell as an administrator (Right-click -&gt; Run as administrator) and type: wsl --install -d Ubuntu-22.04 . | After the installation finishes, restart your computer. . | After restarting, a command prompt or PowerShell prompt may automatically open, asking for a username. Enter a username and password to create your account. Note, that the password will not be visible as you type, but it is still being registered. . If no prompt opens, open PowerShell as an administrator and run: wsl --install -d Ubuntu-22.04 . | Open Command Prompt or PowerShell as a regular user (just click on Command Prompt or PowerShell), and type wsl. The terminal‚Äôs prompt should change from PS C: Users &lt;username&gt; to &lt;username&gt;@MSI:. You are now ready to use Linux/Unix commands. . | To set Ubuntu 22.04 as the default WSL distribution, run: wsl --set-default Ubuntu-22.04 . | WSL (Reference, shows WSL commands) . As a WSL user, refer to these PowerShell commands for troubleshooting or configuration changes. These are used to correct or set up WSL, thus all WSL commands work at the PowerShell prompt PS C: Users &lt;username&gt;. . List all WSL commands: wsl -h or wsl -help | List installable WSL distros: wsl -l -o | List installed WSL distros: wsl -l or wsl --list | List installed WSL distros with status and version: wsl -l -v or wsl -l --verbose | Run the default WSL distro: wsl | Run an alternate distro: wsl -d &lt;distro_name&gt; or wsl --distribution &lt;distro_name&gt; | Shutdown a specific distro: wsl -t &lt;distro_name&gt; or wsl --terminate &lt;distro_name&gt; | Shutdown all distros: wsl --shutdown | Set a specific distro as default: wsl -s &lt;distro_name&gt; or wsl --set-default &lt;distro_name&gt; | . WSL VSCode Install . VS Code provides a place to create and edit code. Follow the steps below to download VS Code onto your computer. . Install VS Code . | When the installer asks to Select Additional Tasks, check ‚ÄúAdd to PATH‚Äù. . | Open VS Code. In the sidebar, click on ‚ÄúExtensions‚Äù. Search for ‚ÄúRemote Development extension pack‚Äù and install it. . | . MacOS Setup . VS Code provides a place to create and edit code. Homebrew is a package manager that simplifies the installation of developer tools. . MacOS VSCode and Homebrew Install . MacOS terminal supports Linux/Unix commands by default. To enhance its capabilities, we need to install Homebrew. . Install VS Code: Download and install VS Code. | . | Install Homebrew: Open the Terminal and run the following command to install Homebrew: /bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot; . | Follow the on-screen instructions to complete the installation. | . | Verify Homebrew Installation: Run brew --version in the Terminal to ensure Homebrew is installed correctly. | . | . Install Developer Tools . At this point, your machine, operating system, and workspace are prepared for additional developer tool installations. (For KASM workspace users, this is where you enter the process, as images have been set up for development.) . Before continuing, it is crucial to understand the purpose of a package manager. A package manager is used to install key developer tools and packages. Examples of tools include Python, Java, and various frameworks for web development, databases, and data science. . Here are some references that may assist you if you encounter any issues while following the procedures. . Ubuntu, for WSL and KASM workspace users (apt-get or apt) . Update package list: sudo apt update | Upgrade installed packages: sudo apt upgrade | Install a package: sudo apt install &lt;package_name&gt; | Remove a package: sudo apt remove &lt;package_name&gt; | Search for a package: apt search &lt;package_name&gt; | List installed packages: apt list --installed | . MacOS users . List installed packages: brew list | Search for a package: brew search &lt;package_name&gt; | Update Homebrew: brew update | Upgrade installed packages: brew upgrade | Uninstall a package: brew uninstall &lt;package_name&gt; | . . With the package manager references in hand, you are now ready to proceed with the detailed instructions for installing the necessary developer tools. Follow the steps specific to your operating system to ensure a smooth setup process. . If using KASM Workspace Ubuntu terminal . Perform steps in either option A or option B below to install Gems . # Option A -- Most tools have been pre-installed. Run shell command to automatically finish tool setup. ~/vscode/portfolio_2005/scripts/activate.sh # Option B -- Run Ubuntu commands manually to manually finish tool setup. # Install Gems export GEM_HOME=&quot;$HOME/gems&quot; export PATH=&quot;$HOME/gems/bin:$PATH&quot; echo &#39;export GEM_HOME=&quot;$HOME/gems&quot;&#39; &gt;&gt; ~/.bashrc echo &#39;export PATH=&quot;$HOME/gems/bin:$PATH&quot;&#39; &gt;&gt; ~/.bashrc gem install jekyll bundler &lt;br&gt; ### If using Windows Subsystem for Linux terminal Perform steps in either option A or option B below to install required Ruby, Python, and Jupyter bash # Option A -- Run shell command to automatically install all your tools. ~/vscode/portfolio_2005/scripts/activate_ubuntu.sh # Option B -- Run each WSL/Ubuntu command to manually install each tool, one by one. # This section is for setting up Ruby, Python, and Jupyter Notebook on WSL (Ubuntu). # Upgrade and install packages for Ubuntu echo &quot;=== Upgrade Packages ===&quot; sudo apt update sudo apt upgrade -y # Install Ruby and necessary development tools echo &quot;=== Install Ruby ===&quot; sudo apt install -y ruby-full build-essential zlib1g-dev # Install Python 3 and pip echo &quot;=== Install Python ===&quot; sudo apt-get install -y python3 python3-pip python-is-python3 # Install Jupyter Notebook echo &quot;=== Install Jupyter Notebook ===&quot; sudo apt-get install -y jupyter-notebook # Install Gems export GEM_HOME=&quot;$HOME/gems&quot; export PATH=&quot;$HOME/gems/bin:$PATH&quot; echo &#39;export GEM_HOME=&quot;$HOME/gems&quot;&#39; &gt;&gt; ~/.bashrc echo &#39;export PATH=&quot;$HOME/gems/bin:$PATH&quot;&#39; &gt;&gt; ~/.bashrc gem install jekyll bundler . . . If using MacOS terminal . Perform steps in either option A or option B below to install required Ruby, Python, and Jupyter. . # Option A -- Run shell command to automatically install all your tools. ~/vscode/portfolio_2005/scripts/activate_macos.sh . # Option B -- Run each MacOS command to manually install each tool, one by one. # This section is for setting up Ruby, Python, and Jupyter Notebook on macOS. # Upgrade Homebrew and install xz (decompression utility) echo &quot;=== Upgrade Packages ===&quot; brew update brew upgrade brew install xz # decompression utility # Install rbenv, Ruby 3.1.4, and configure it echo &quot;=== Install Ruby ===&quot; brew install rbenv rbenv install 3.1.4 rbenv global 3.1.4 # Configure rbenv to initialize in the shell echo &#39;if which rbenv &gt; /dev/null; then eval &quot;$(rbenv init - zsh)&quot;; fi&#39; &gt;&gt; ~/.zshrc # Start a new terminal, test if Ruby 3.1.4 is set rbenv versions # Install Python and Pip using Homebrew echo &quot;=== Install Python ===&quot; brew install python # Install Jupyter Notebook using Homebrew echo &quot;=== Install Jupyter Notebook ===&quot; brew install jupyter # Install Gems export GEM_HOME=&quot;$HOME/gems&quot; export PATH=&quot;$HOME/gems/bin:$PATH&quot; echo &#39;export GEM_HOME=&quot;$HOME/gems&quot;&#39; &gt;&gt; ~/.zshrc echo &#39;export PATH=&quot;$HOME/gems/bin:$PATH&quot;&#39; &gt;&gt; ~/.zshrc gem install jekyll bundler . If using MacOS terminal, continue with these steps . These steps are required for both Option A and Option B . ##### All Apple, resolves failure on make step ln -s /opt/homebrew/share/jupyter/nbconvert ~/Library/Jupyter ##### Only Apple Silicon M series, resolves Failure on python and pip ln -s /opt/homebrew/bin/python3 /opt/homebrew/bin/python ln -s /opt/homebrew/bin/pip3 /opt/homebrew/bin/pip ###### Only Apple Intel series, resolves failure on python and pip sudo ln -s /usr/local/bin/python3 /usr/local/bin/python sudo ln -s /usr/local/bin/pip3 /usr/local/bin/pip . . . Version Checks . From here the steps for all should behave the same. . Close existing terminal!!! | Then start a new terminal. Start and stop are required to make sure changes to you machine have taken effect. | Run each check below, if the check does not work, you will need to backup to resolve it now!!! | # Show the active Ruby version, MacOS is 3.1.4 ruby -v # Show active Python version, it needs to be 3.9 or better python --version # Setup Python libraries for Notebook conversion pip install nbconvert # library for notebook conversion pip install nbformat # notebook file utility pip install pyyaml # notebook frontmatter # Show Jupyter packages, nbconvert needs to be in the list jupyter --version # Show Kernels, python3 needs to be in list jupyter kernelspec list # does not work on Cloud Ubuntu . . Open a Project . Learn to use Terminal, VSCode, and GitHub. Use VSCode‚Äôs connection to GitHub to pull and sync code. . Git Clone and VSCode Launch . Follow the steps in order. References to WSL are not applicable if you have MacOS or Cloud Ubuntu. . Open a Linux-supported Terminal . | Setup personal GitHub variables: Change youremail@gmail.com and yourGHID to match your credentials. This is required prior to syncing code to GitHub. . git config --global user.email youremail@gmail.com git config --global user.name yourGHID . | Move to your home directory: . cd . | Setup a directory for projects: . mkdir nighthawk cd nighthawk git clone https://github.com/nighthawkcoders/student_2025.git . | Open the repository in VS Code: . cd student_2025 code . . | WSL only!!! Very important!!! Check that VSCode is opened in WSL, observe at the bottom left corner of the window. This is a requirement for grading. . . | . . Development Cycle . The development cycle involves iterative steps of making changes, running the server, testing, committing, and syncing changes to GitHub. . Bundle Install and Make Steps . All students are building a GitHub Pages website. . The following commands are the same for all machine types, terminals, and projects. The previous installation steps were to ensure all environments are compatible. . Open your terminal in VS Code through View -&gt; Terminal. Alternatively, the shortcut Ctrl + ` can be used. (Opening up VS Code‚Äôs terminal opens your student repository in the project directory.) . | Type bundle install This command installs the dependencies in your Gemfile. . | Type make This runs the local server. Repeat this command as often as you make changes. . | Hover then Cmd or Ctl Click on the Server address http://127.0.0.1 ‚Ä¶ provided in the terminal output from the make command. . | ### Congratulations!!! An output similar to below means tool and equipment success ### johnmortensen@Johns-MBP portfolio_2025 % make Stopping server... Stopping logging process... Starting server... Server PID: 48190 Terminal logging starting, watching server... Server started in 3 seconds Configuration file: /Users/johnmortensen/vscode/portfolio_2025/_config.yml To use retry middleware with Faraday v2.0+, install `faraday-retry` gem Source: /Users/johnmortensen/vscode/portfolio_2025 Destination: /Users/johnmortensen/vscode/portfolio_2025/_site Incremental build: disabled. Enable with --incremental Generating... Remote Theme: Using theme jekyll/minima done in 2.493 seconds. Auto-regeneration: enabled for &#39;/Users/johnmortensen/vscode/portfolio_2025&#39; Server address: http://127.0.0.1:4100/portfolio_2025/ . Make commands (local build: make, make clean, make stop, make convert) . These commands are used to build and manage a localhost version of website. The purpose of this is to verify and test code changes prior to pushing changes to GitHub Pages. . make Runs the local server. . | make clean Stops the local server and cleans the files. . | make stop Stops the local server. This means you will be unable to access your blog on http://localhost until you run make again. . | make convert Converts Jupyter Notebook files. Run this if your .ipynb files are not updating on the server, it may assist in finding the error. . | . VSCode Commit changes . The VSCode saved files are only stored on your computer locally until you commit/sync the changes. If you visit your actual blog on the web (https://.github.io/student_2025), you will notice that the changes are not reflected there. To ensure that the public website updates, you will need to **commit and sync your changes in VSCode**; this will push changes to GitHub and trigger a rebuild of the website. . Commit Changes, version control locally . This creates a version update in your local git database. Developers often commit several times before they sync/push. This allows for many small changes that can be easily reviewed and rolled back. Review COMMITS in VSCode. . Click on the button that says ‚ÄúSource Control‚Äù in VS Code‚Äôs left sidebar . | Click on the plus sign to stage your changes . . | Enter a message for your commit in the message box. . | Click the ‚ÄúCommit button‚Äù . | Sync Chaanges, update change in GitHub . This moves commit(s) from the local git database to GitHub. This will create an Action in GitHub Pages and trigger an update to the website if the code is error-free. . Click the Menu button and then click ‚ÄúPush‚Äù. . . | . .",
            "url": "http://localhost:4100/adi_student/devops/tools/setup",
            "relUrl": "/devops/tools/setup",
            "date": " ‚Ä¢ Aug 21, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "Tools and Equipment",
            "content": "Development Tools Intro . The essentials of development begin by understanding the need for tools and equipment. The Tools and Equipment topic highlights the core components you‚Äôll need for a smooth entry into coding, collaboration, and project creation. . A computer, GitHub account, and a code editor are the starting points for rapid entry into coding. Adding frameworks for databases and Jupyter Notebooks bridges a computer into fields like IT, data science, and all the emerging technologies centered on AI. . Essentials of Development Tools . Understanding and utilizing the right development tools is crucial for a successful coding journey. This section highlights the core components and additional tools that will enhance your learning experience and collaboration. . Laptop Requirement: Ensure you have a laptop with development tools installed. MacOS and Windows are preferred. Chromebooks are supported by using a KASM cloud workspace. | Version Control: GitHub will store your coding projects and serve as a collaboration hub with others. | Code Editor: This course will use Visual Studio Code for its extensive support for programming languages and helpful coding features. | Interactive Coding: In this course, coding will be interactive and instantaneous. Visual Studio Code, with support for Jupyter Notebooks and GitHub Pages, is ideal for coding, data analysis, capturing notes, and creating documentation. | Web Hosting: Throughout this course, students and teachers will publish their projects and notes using GitHub pages. Students will showcase their projects and chronicle their development journey. | Application Containerization: Using tools like GitHub Pages, Docker, and AWS, students will learn to create, deploy, and run applications on the Internet. | Communication and Collaboration: Stay updated and connected with course announcements and discussions using Slack. The DM, group messages, and channel communication options allow students to stay informed and collaborate effectively. | . By mastering these tools, you‚Äôll be well-equipped to tackle various projects and collaborate efficiently with your peers. Future topics will delve deeper into advanced tools and techniques to further enhance your development skills. . Tool and Setup Goals . By the end of this unit, you should have installed and become familiar with the following tools and concepts: . GitHub Portal: Create an account on GitHub. It will be used to store, plan, track, and publish your coding projects. | MacOS Tools: Use the Terminal with the Homebrew brew command for installing developer tools on MacOS. | Windows Tools: Use the Terminal with the wsl command to set up a Linux shell. Use the apt command within that shell for installing developer tools on Ubuntu. | KASM Cloud Tools: Become familiar with the Linux shell. Use the apt command to review installed developer tools on Ubuntu. | Visual Studio Code and Marketplace: Get comfortable with the Visual Studio Code editor and explore marketplace extensions to enhance your coding experience. | JavaScript, Python, Java: Learn the Development Life Cycle and get introduced to Jupyter Notebooks. | Python Packages: Learn to use the pip command in the Terminal to add Python libraries to your projects. Libraries are pre-written code shared by others. | Java Packages: Understand how to use the pom.xml configuration file to add third-party libraries to your Java projects. | . Engagement and Participation Goals . Active Participation: Bringing your laptop daily is crucial. Lack of access to necessary tools equates to an absence and will require makeup. | Understanding Tools: Engage with tools daily. Discuss what you learn as you use your tools with your pair coder, then share newly learned elements with others. Familiarity and sharing will breed understanding and efficiency in your individual and team projects. | Community and Support: Be a daily communicator at your table and in Slack. Start the communication habit now. Information sharing needs to be constant and timely. | Team and Project Communication: Start researching tenets of Agile/Scrum methodologies. Use the GitHub Issue and GitHub Project tools. All students will qualify for the right to be on a project team based on fundamental tool knowledge, communication habits, and supporting assessments and analytics. | .",
            "url": "http://localhost:4100/adi_student/devops/tools/home",
            "relUrl": "/devops/tools/home",
            "date": " ‚Ä¢ Aug 21, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "Accounts",
            "content": "Personal Identifiable Information (PII) . When creating accounts for this course, it‚Äôs important to understand what personal identifiable information (PII) is and how and what to protect. PII includes any information that can be used to identify you. . In this course, in some cases we will ask you share or build the value PII. We hope to do it in a good way. . Why PII Matters . Websites like LinkedIn are places where we want to showcase our accomplishments. We intend to advertise PII. . As individuals and a society, sometimes we are willing spread our PII through sites like TikTok, Reddit, X, Instagram or Facebook. This often provides satisfaction, some refer to it as the dopamine effect. Sometimes we are proud of what we advertise, sometime us or others wish they could retract the information shared. . In our society, all the accounts mentioned above become part of our PII. . Types of PII . Public Information: These are details that are generally known and shared: Name | Email (consider using a secondary email) | Picture | High School and College attended | Properties you own | State and City of residence | Previous residences | Credit Reports | Home router location | . | Sensitive Information: Be more cautious with these details: Full birth date | Place of Birth | Street Address | Phone Number | Maiden names of Mother or Grandmother | Driver‚Äôs License Number | . | Highly Confidential Information: Keep these absolutely secret: Internet Access Credentials | Google key store | Two-Factor Authentication sources | Social Security Number | . | . Techniques to Increase Security . Multi-Factor Authentication (MFA): Use systems that require a code sent to your phone or email. | Biometrics: Secure your devices with fingerprints or facial recognition. | Asymmetric Cryptography: Understand that public-key cryptography uses a pair of keys (one public, one private) to encrypt and decrypt messages. This is used in SSL for secure websites (aka https://). | Strong Passwords: Use complex and unique passwords for different accounts. Consider using a password manager to keep track of them. | Regular Software Updates: Keep your operating system, applications, and antivirus software up to date to protect against the latest threats. | Secure Home Router: Create a strong password for your home router to ensure it is not easily compromised from the internet. | Secure Wi-Fi: Use strong passwords for your home Wi-Fi network to ensure it is not easily accessed by others in proximity (e.g., the stree). Consider using a VPN when accessing Wi-Fi in public places (e.g., coffee shops). | Data Encryption: Encrypt sensitive data on your devices and backups to protect it from unauthorized access. | . Be Aware of Internet Threats . Viruses and Malware: These compromise security and are often spread through email attachments. | Phishing: Be cautious of attempts to get your information through deceptive emails or websites. | Social Engineering: Be aware of tactics used to manipulate you into divulging confidential information. | Post-Incident Actions: If compromised, review and secure all vulnerabilities immediately. Revise and update your PII plan to prevent future incidents. | . By understanding and protecting your PII, you can safely navigate the digital world and keep sensitive and highly confidentail personal information secure. . Nighthawk Coders Accounts . In this class, we will advise you to create several accounts. Additionally, we will request that you publish a public-facing name and email on some of these accounts. . Email Accounts . You will be using and sharing email accounts with the teacher and fellow students. . A strategy I employ is maintaining different email accounts according to the expected type or volume of information (junk email, common email, work/school email, important email). This is not about security, but it helps set an expectation for the ‚Äúpurpose,‚Äù ‚Äúvalue,‚Äù or ‚Äúimportance‚Äù of information aggregated to that endpoint. . GitHub Account . We want you to create a GitHub account. You will need to establish a GitHub user ID, username, and email. This can include one or more email accounts. We will ask that you make a name and email public. This account will be your social media account as a coder. . We suggest that you use a ‚Äújunk‚Äù or ‚Äúcommon‚Äù email account for this platform. We recommend that you don‚Äôt use your school email. . The email you make public should be in the same category as what you would share on more professional social media accounts, i.e., in the ‚Äúcommon‚Äù or ‚Äújunk‚Äù category. . GitHub Pages . We will ask you to publish a Student Portfolio using GitHub Pages. This will be a public website and will be indexed by Google and Google Analytics. . Slack Account . We will ask you to create an account on Slack, which will require PII. We suggest that you use a ‚Äújunk‚Äù or ‚Äúcommon‚Äù email account for this platform. We recommend that you don‚Äôt use your school email. . PII in this category should be restricted to the teacher and fellow students. This includes students from the past, as we have allowed this to be open to those who were formerly enrolled. There are different Slack workspaces for CSSE, CSP, and CSA. . Portfolio 2025 Account . We will ask you to create a user account based on your GitHub user ID. This will be used to build course lists, provide compute services (e.g., AWS, KASM), and aggregate analytics for the teacher. . PII in this category should be restricted to the teacher and fellow students. This includes students from the past, as we have allowed this to be open to those who were formerly enrolled. . PII Strategy on Account Creation . It is in the teacher‚Äôs interest that you establish and continually refine your PII (Personal Identifiable Information) strategy. It is likely that you are already active in sharing common PII, considering for yourself what is OK to share. As you progress in the digital world, you will likely need to adapt. . Key Points to Consider: . Categorize Information: Public Information: Information you are comfortable sharing publicly, such as your name and general interests. | Sensitive Information: Information that should be shared cautiously, such as your full birth date and phone number. | Highly Confidential Information: Information that should be kept strictly private, such as your social security number and internet access credentials. | . | Use Different Email Accounts: Maintain different email accounts for different purposes (e.g., junk email, common email, work/school email, important email). This helps manage the type and volume of information you receive and sets expectations for the importance of the information. | . | Be Prepared for Security Incidents: Anticipate that you may be hacked and will need to secure any vulnerabilities. Regularly update your passwords and use multi-factor authentication where possible. | . | Adapt and Evolve: As you gain more experience and your digital footprint grows, continually reassess and adapt your PII strategy to ensure it remains effective. | . | Parting Advice: . As you create and manage your accounts, always be mindful of the information you are sharing. Protecting your PII is an ongoing process that requires vigilance and adaptability. By categorizing your information, using different email accounts, and preparing for potential security incidents, you can better safeguard your personal information. . Remember, the digital world is constantly evolving, and so should your approach to managing your PII. Stay informed about the latest security practices and be proactive in protecting your digital identity. Your future self will thank you for the precautions you take today. .",
            "url": "http://localhost:4100/adi_student/devops/tools/accounts",
            "relUrl": "/devops/tools/accounts",
            "date": " ‚Ä¢ Aug 19, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "Learning Habits",
            "content": "Habits Intro . The provided text text is a comprehensive framework for evaluating students in a Computer Science Project-based learning course, focusing on a broad spectrum of criteria beyond traditional assignment grades. This framework encompasses both soft skills and technical abilities, aiming to create a holistic profile of each student‚Äôs performance and growth. . Focus and Intentions: This category assesses students‚Äô general attitudes and behaviors towards learning, including attendance, work habits, behavior, timeliness, and prerequisite knowledge. It emphasizes the importance of consistent participation, productive work ethics, adaptability, and preparedness for the course. . | Technical Progression: This section evaluates students‚Äô development of technical skills and understanding over the course. It includes assessments of their initial technical sensibility, their ability to clearly present and explain technical concepts, and their growth in technical expertise as they prepare for significant milestones like the AP exam. . | Soft Skills and Presentation: This area focuses on students‚Äô interpersonal and self-management skills, including self-advocacy, communication and collaboration, leadership, and integrity. It highlights the importance of effective communication, teamwork, leadership potential, and ethical behavior in both academic and professional settings. . | . The framework suggests that each student‚Äôs performance is evaluated not just on their academic achievements but also on their work habits, technical skills, and soft skills. This approach aims to provide a more comprehensive assessment of students‚Äô readiness for future challenges in Data Science and related fields. . Habits and Ongoing Evaluations . In any course, ‚ÄúGrade‚Äù, is not the only assessment that is on a report card. A Student, on a daily basis, establishes work behaviors and demonstrates capabilities with a Teacher. . As an employee, on a daily basis, an individual establishes work behaviors with peers and manager. Sometimes managers document behaviors. As Data Science improves, employers are constantly considering bnd re-considering etter techniques for monitoring employee work. . In this course, will be establishing a Data Science profile 1/0, or a ratio, for each students, this profile will be maintained by Teacher and will be complemented by the sytems we use. The course will be using these ratios in evaluating the grade and other assesment criteria for each students project and final report card. . Focus, Intentions . Attendance: Does the student have a computer every day, were they tardy, or did they have any irregularities in presence; like being gone for 1/2 hour bathroom breaks, consistently missing intro sessions to class, ‚Ä¶ . | Work Habits: Does the student have a class time work ethic or in Teacher perception appears to be productive; do they have collaboration meetings with pair and team? do they do their own work in class time? do the follow a plan? are the open to change? are the improving habits? are their work habits a positive to those around them?‚Ä¶ . | Behavior: Does the student require redirection from Teacher to be on task? are they active and appropriately participating in Tech Talks? are they actively trying to win habit points? are they focussing on the right things at the right time? do they have grit and persistence? do they avoid distractions like phones, ear phones, head phones, paper? ‚Ä¶ . | Timeliness: Is the student ready to participate in live reviews? are they aware of assignments requirements and due dates? is their work outcome in alignment with assignment expectation? are they on track with work and showing progress? is progress consistent with time period, expectations, and Teacher assessed capabilities? do they keep ahead of the projects? do they avoid last day, last minute work? ‚Ä¶. . | Qualified, satisfies pre-requisites: Teacher assessment on if the Student was qualified to take class. For instance, some CSA students skip CSP and have had no previous background in CompSci. Another case, is the student a ‚Äúgood student‚Äù; someone that completes tasks and accomplishes goals; someone that is prepared to work in class and do homework; is the student able to identify their needs and learning style requirements; do they participate; do they ask questions; will they review visuals; talk about problems; attend office hours; Finally, is the student progressing and futher qualify themself through the year; is the student carrying skills from earlier sprints into current sprint. . | . | Technical Progression . Tech sense: Teacher assesment on the ‚Äútechnical sense or sensibility‚Äù when entering the class and each sprint throughout the year. For instance, in the beginning is student able to navigate their own computer, locate files, install software? Or as they progress through year are they able to use their tools, perform tool updates, keep things working, troubleshoot? Are they able to navigate through technical elements? Over time, will they adapt and try to improve efficiency? ‚Ä¶ . | Tech talk: Does the student show the ability to explain what they have been working on? Are the able to describe technical elements with correct vocabulary? Are they able to understand technological jargon, understand the technical frameworks in order to explain it to others? Are they confident and prepared? ‚Ä¶ . | Tech growth: Teacher assesment on ‚Äútechnical rating‚Äù as the student progresses in class or prepares to take the AP exam. Did the student acquire technical abilities in each Sprint prior to AP exam? Does the student learn the Tech, or do they simply try for the points? Is the student building on skills learned as foundations for the next task? At the time of the AP exam time, did the Teacher believe that they would undoubtedly receive a ‚Äú3‚Äù or higher? . | . | Soft Skills, Presentation . Self advocacy: Teacher assesment and perception on how the student self advocates. Does the student effectively communicate, convey, negotiate or assert interests, desires, needs? Does the student seek out help when needed? Does the student ask questions on Slack, in person, of team members? Does the student attend Tutorial? Is the student aware and informed of assignments? Does student make informed decisions and take responsibility for their own decisions? . | Comm and Collab skills: Teacher assesment and perception on whether the student is a collaborator and communicator in classroom. Does the Teacher see the student exhibiting collaboritive behaviors? Does student explain and review work with others? Do they work consistently plan work with others? Are communication and collaboration behaviors a willing and active attributes in the students persona? Does the Teacher observe the student as active in communication during live reviews? . | Integrity: Teacher assesment on how the student represents their own work and behavior. Does the student have a general sense of self-awareness, group-awareness, and how actions impact others? Does the student and student group respect and follow the rules established in the classroom and by the Teacher? Without question, did the student do their own work on each assignment and throughout the grading period? In live reviews, did the Teacher think the student was misrepresenting work as their own? Did the student stand-by silently as other were presenting, silence usually means coat-tailing in hope for credit? Was there questionable behavior that was not atoned, for instance being a suspect or caught in cheating scandal? . | Organized: Teacher assesment or observation on organization and leadership qualities of the student. Did the Teacher observe the student as having key leadership and organization skills? Did the Teacher see time management skills exhibited by the student, including creating work issues and schedules, finding the in-between time for things that are not part of the norm? Did the student exhibit networking, critical thiking, and proactivity? Did the Teacher see excellence and the student to take on a technical or leadership position in the classroom? Did the student follow through with that responsibiility? Would the Teacher or did the Teacher ask the student to perform a task important to the entire classroom? . | . | . Hacks, Learning Habits Table . Review criteria above. In this review, pairs should rate each other base on their mutual experience. . Rank to Ratio, rank is an integer 1 = .55 2 = .75 3 = .85 4 = .90 4+Mastered-Y = .95 . Skill Mastered (Y/N) Rank (1-4) Ratio Notes . Attendance | [ ] | 0 | 0.0 | ¬† | . Work Habits | [ ] | 0 | 0.0 | ¬† | . Behavior | [ ] | 0 | 0.0 | ¬† | . Timeliness | [ ] | 0 | 0.0 | ¬† | . Tech Sense | [ ] | 0 | 0.0 | ¬† | . Tech Talk | [ ] | 0 | 0.0 | ¬† | . Tech Growth | [ ] | 0 | 0.0 | ¬† | . Advocacy | [ ] | 0 | 0.0 | ¬† | . Comm &amp; Collab | [ ] | 0 | 0.0 | ¬† | . Integrity | [ ] | 0 | 0.0 | ¬† | . Organized | [ ] | 0 | 0.0 | ¬† | . Total | ¬† | ¬† | 0.0 | ¬† | . Average | ¬† | ¬† | 0.0 | ¬† | .",
            "url": "http://localhost:4100/adi_student/pair/habits",
            "relUrl": "/pair/habits",
            "date": " ‚Ä¢ Aug 17, 2023"
        }
        
    
  
    
        ,"post10": {
            "title": "Pair Showcase",
            "content": "Showcase Overview . This will be a Live Review! A Live Review is where Students present to a Teacher. The Students share accomplishments from the Sprint with the Teacher. The review will highlight elements from the sprint. . Work is performed daily in class, expectations are 2 hours of outside work weekly for CSSE, 3 hours for CSP and CSA. A Showcase for a Sprint is where you, and in this case your pair, have progressed working on provided Assignments and Hacks in the time provided until you reach the scheduled Showcase. Everything is iterative, so there is no such thing as extended time in a Sprint Showcase. Everyday you should be adding work and make blog updates to prepare for the Showcase. . Showcase Requirements . This is a culmination of all activities in a Sprint. - Review Sprint Information. - Be sure to open and review Sprint Illustration. . During the Sprint there is always time to preview, communcate, or checkoff progress with the Teacher; if you have shared progress during the sprint, be sure to highlight success to jog Teachers memory. Never, never expect the Teacher to remember something you did. The Showcase is time for you to shine, impress, and recap journey. . Format of Showcase. This is a pair event. This Sprint is focused on Pair Programming and Work, not Individual. In a class, live reviews for this Showcase will be done in pairs or trios (rare, 3 or less per class) for this event. Make sure work is polished and reviewed. Part of working with a pair is preparation, review, and testing prior to presenting to Teacher. In the Tech world, quality presentations of Tech are as important as the Tech itself. Never share work that has not be previewed or share buggy work in a Showcase. This lacks professionalism. | Google or Microsoft Docs, Sheets, Presentations are frowned upon and will result in significant deduction. It is expected that you will be showing materials from your personal Student blog. The Teacher believes using a blog is helping with your ability to design, organize, and code. | Pair work can be shared, but both people should be able to talk about anything they expect to be counted toward their personal credit. If you did not participate or carry your own load on a topic, be honest, don‚Äôt fake accomplishments. | Attempts to get credit by claiming falsely or coat tailing is frowned upon. | . | Preparation and Time. The Showcase requires preparation. At this event, it would be a mistake to ask ‚Äúwhat do you want to show?‚Äù. This type of question should be asked before the showcase.‚Äù. Additionally, there are many sources that have been provided to answer that question. Spring Blogs. The hacks within the blogs contain requirements and extras that should/could be incorporated into the materials you present in the Showcase. | . | .",
            "url": "http://localhost:4100/adi_student/pair/showcase",
            "relUrl": "/pair/showcase",
            "date": " ‚Ä¢ Aug 16, 2023"
        }
        
    
  
    
        ,"post11": {
            "title": "Pair Showcase",
            "content": "Showcase Overview . This will be a Live Review! A Live Review is where Students present to a Teacher. The Students share accomplishments from the Sprint with the Teacher. The review will highlight elements from the sprint. . Work is performed daily in class, expectations are 2 hours of outside work weekly for CSSE, 3 hours for CSP and CSA. A Showcase for a Sprint is where you, and in this case your pair, have progressed working on provided Assignments and Hacks in the time provided until you reach the scheduled Showcase. Everything is iterative, so there is no such thing as extended time in a Sprint Showcase. Everyday you should be adding work and make blog updates to prepare for the Showcase. . Showcase Requirements . This is a culmination of all activities in a Sprint. - Review Sprint Information. - Be sure to open and review Sprint Illustration. . During the Sprint there is always time to preview, communcate, or checkoff progress with the Teacher; if you have shared progress during the sprint, be sure to highlight success to jog Teachers memory. Never, never expect the Teacher to remember something you did. The Showcase is time for you to shine, impress, and recap journey. . Format of Showcase. This is a pair event. This Sprint is focused on Pair Programming and Work, not Individual. In a class, live reviews for this Showcase will be done in pairs or trios (rare, 3 or less per class) for this event. Make sure work is polished and reviewed. Part of working with a pair is preparation, review, and testing prior to presenting to Teacher. In the Tech world, quality presentations of Tech are as important as the Tech itself. Never share work that has not be previewed or share buggy work in a Showcase. This lacks professionalism. | Google or Microsoft Docs, Sheets, Presentations are frowned upon and will result in significant deduction. It is expected that you will be showing materials from your personal Student blog. The Teacher believes using a blog is helping with your ability to design, organize, and code. | Pair work can be shared, but both people should be able to talk about anything they expect to be counted toward their personal credit. If you did not participate or carry your own load on a topic, be honest, don‚Äôt fake accomplishments. | Attempts to get credit by claiming falsely or coat tailing is frowned upon. | . | Preparation and Time. The Showcase requires preparation. At this event, it would be a mistake to ask ‚Äúwhat do you want to show?‚Äù. This type of question should be asked before the showcase.‚Äù. Additionally, there are many sources that have been provided to answer that question. Spring Blogs. The hacks within the blogs contain requirements and extras that should/could be incorporated into the materials you present in the Showcase. | . | .",
            "url": "http://localhost:4100/adi_student/pair/showcase",
            "relUrl": "/pair/showcase",
            "date": " ‚Ä¢ Aug 16, 2023"
        }
        
    
  
    
        ,"post12": {
            "title": "Pair Programming",
            "content": "‚ÄúReal World‚Äù Projects . Don‚Äôt do it alone. You and your pair will work collaboratively together and will learn to Build, Deploy and Host a Website (many blogs). Each blog has ‚ÄúTechnicals‚Äù learned throughout each project. This Website will be done as incremental blogs as you learn. Each week an assignment will be given, and then the next week it will be under Live Review, and then for the weeks after each blog will be hosted on your Website. . Feature Considerations for Website (blog project) Final Project and Blog Requirements - A home or fun zone for your Website should contain a unique idea(s) - Educational zones that capture every key learning and course objectives - About Me page, consider personal privacy issues as this will be public Project Technicals, over the Trimester Managing Project-based Learning (PBL) requirements for each Project (Issues, Scrum Board) CSSE, CSP, CSA. Use of ‚ÄúJavaScript, HTML, CSS‚Äù. Frontend or Presentation development. | CSP. Use of ‚ÄúPython Functions and Classes‚Äù in a backend. | CSA. Use of ‚ÄúJava Classes and OOP‚Äù in a backend. | Data Structures. The exchange between frontend and backend: Backend could be Data Frames from Pandas, ‚ÄúSQL‚Äù databases, ‚ÄúAPI‚Äù data, etc. | . | . | . | . | Individual GitHub Pages Considerations Each week we will be studying Big Ideas/Key Objectivies. There will be Units and blogs in the schedule that will describe key objectives. In AP Classes this will include Collage Board Test Prep and PBL Tech Talks. In Articulated Courses, this will be documenting meeting objectives of the course. GitHub (GH) Pages should be used as a project/lab notebook. In GH Pages, you can capture Project-based Learning (PBL). Also, in Jupyter Notebooks you can capture JavaScript, Python, and Java key learnings each week using Jupyter Notebook code cells! | BTW, using GH Pages will let you Code and Blog at the same time. Jupyter Notebooks using Python and Markdown will enable running code in code cells and notes in Markdown cells. The Teachers like running code! Jupyter Notebooks, using Python kernel can do JavaScript, Python, Bash and other languages. Additionally, there is an independent Java kernel. | . | . | . Hacks . Establish PBL and Comp Sci attitude; often called an Agile Mindset or Growth Mindset. Here are some elements you could add to start your blog. . Watch a video How I Would Learn To Code. Record some thoughts. | Attitude. An Agile/Growth mindset is not knowing the answer, making lots of mistakes and performing iteration. A successful grade is dependent on making mistakes, research, asking questions, and continual iteration. Record some mistakes you made and then show the resulting corrections. | Tools and Equipment. Highlight some items you learned from the tools setup. Why do you think bringing a personal laptop or Chromebook to class daily is so important? Comment on how the Internet, AP Classroom, ChatGPT, and Nighthawk Coders website will be considered as a textbook. | Requirements. Everything will be distributed electronically. All code you develop will be delivered to the Cloud. No paper! | Grading guidelines. Write your interpretation of this paragraph in your blog. There will be key technical objectives that will require producing tangibles aka tangible artifacts. Essentially, it is impossible to be late with work if you work consistently attend class, work in class and turn in progressive tangibles each week. Thus, failure to have work will result in a point deduction. Additionally, late work must be defended during office hours and will receive a 10% deduction or more. | Understanding point scale. Write your interpretation of the below in your blog. A High ‚ÄúA‚Äù is very tough to achieve, something beyond the given requirements. Something that exhibits an unforced desire to learn and Code/Code/Code beyond. A series of these types of grades is required to earn a Teacher recommendation for College. Low ‚ÄúA‚Äù is consistency in producing tangibles toward Team Project and Individual GH Page according to Issues and Scrum Board plans. Plans must be consistent with key objectives and technicals. | ‚ÄúB‚Äù is having flaws in consistency or tangible shortcomings, but mostly on track. A flaw would be mostly working code, and attempts, but an incomplete assignment. | ‚ÄúC‚Äù is a lack of consistent effort, lacking tangibles. Lack of producing running Code. | Below ‚ÄúC‚Äù is composed of Slash/Slash/Slash offenses. Lack of attendance, disruptive behaviors, using phone inappropriately, doing work from other classes during CompSci class time, paper visible in class, and turning in ‚Äútangibles‚Äù that you can‚Äôt represent in live review. | Zero is a result of plagiarism. The Teachers will likely miss the first few offenses of plagiarism, thus any offense will result in an inquiry on previous work. Remember this is an effort-based class. | . | . | .",
            "url": "http://localhost:4100/adi_student/pair/programming",
            "relUrl": "/pair/programming",
            "date": " ‚Ä¢ Aug 16, 2023"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "",
          "content": "Introduction . Nighthawk Pages is a project designed to support students in their Computer Science and Software Engineering education. It offers a wide range of resources including tech talks, code examples, and educational blogs. . GitHub Pages can be customized by the blogger to support computer science learnings as the student works through the pathway of using Javascript, Python/Flask, Java/Spring. . Student Requirements . Del Norte HS students will be required to review their personal GitHub Pages at each midterm and final. This review will contain a compilation of personal work performed within each significant grading period. . In general, Students and Teachers are expected to use GitHub pages to build lessons, complete classroom hacks, perform work on JavaScript games, and serve as a frontend to full-stack applications. . Exchange of information could be: . sharing a file: `wget ‚Äúraw-link.ipynb‚Äù | creating a template from this repository | sharing a fork among team members | etc. | . History . This project is in its 3rd revision (aka 3.0). . The project was initially based on Fastpages. But this project has diverged from those roots into an independent entity. The decision to separate from Fastpages was influenced by the deprecation of Fastpages by authors. It is believed by our community that the authors of fastpages turned toward Quatro. After that change of direction fastpages did not align with the Teacher‚Äôs goals and student needs. The Nighthawk Pages project has more of a raw development blogging need. . License . The Apache license has its roots in Fastpages. Thus, it carries its license forward. However, most of the code is likely unrecognizable from those roots. . Key Features . Code Examples: Provides practical coding examples in JavaScript, including a platformer game, and frontend code for user databases using Python and Java backends. | Educational Blogs: Offers instructional content on various topics such as developer tools setup, deployment on AWS, SQL databases, machine learning, and data structures. It utilizes Jupyter Notebooks for interactive lessons and coding challenges. | Tools and Integrations: Features GitHub actions for blog publishing, Utterances for blog commenting, local development support via Makefile and scripts, and styling with the Minima Theme and SASS. It also includes a new integration with GitHub Projects and Issues. | . Contributions . Notable Contributions: Highlights significant contributions to the project, including theme development, search and tagging functionality, GitHub API integration, and the incorporation of GitHub Projects into GitHub pages. Contributors such as Tirth Thakker, Mirza Beg, and Toby Ledder have played crucial roles in these developments. . | Blog Contributions: Often students contribute articles and blogs to this project. Their names are typically listed in the front matter of their contributing post. . | . . GitHub Pages setup . The absolutes in setup up‚Ä¶ . Activate GitHub Pages Actions: This step involves enabling GitHub Pages Actions for your project. By doing so, your project will be automatically deployed using GitHub Pages Actions, ensuring that your project is always up to date with the latest changes you push to your repository. . On the GitHub website for the repository go to the menu: Settings -&gt; Pages -&gt;Build | Under the Deployment location on the page, select ‚ÄúGitHub Actions‚Äù. | . Update _config.yml: You need to modify the _config.yml file to reflect your repository‚Äôs name. This configuration is crucial because it ensures that your project‚Äôs styling is correctly applied, making your deployed site look as intended rather than unstyled or broken. . github_repo: &quot;student_2025&quot; baseurl: &quot;/student_2025&quot; . Set Repository Name in Makefile: Adjust the REPO_NAME variable in your Makefile to match your GitHub repository‚Äôs name. This action facilitates the automatic updating of posts and notebooks on your local development server, improving the development process. . # Configuration, override port with usage: make PORT=4200 PORT ?= 4100 REPO_NAME ?= student_2025 LOG_FILE = /tmp/jekyll$(PORT).log . Tool requirements . All GitHub Pages websites are managed on GitHub infrastructure and use GitHub version control. Each time we change files in GitHub it initiates a GitHub Action, a continuous integration and development toolset, that rebuilds and publishes the site with Jekyll. . GitHub uses Jekyll to transform your markdown and HTML content into static websites and blogs. Jekyll. | A Linux shell is required to work with this project integration with GitHub Pages, GitHub and VSCode. Ubuntu is the preferred shell, though MacOS shell is supported as well. There will be some key setup scripts that follow in the README. | Visual Studio Code is the Nighthawk Pages author‚Äôs preferred code editor and extensible development environment. VSCode has a rich ecosystem of developer extensions that ease working with GitHub Pages, GitHub, and many programming languages. Setting up VSCode and extensions will be elaborated upon in this document. | An anatomy section in this README will describe GitHub Pages and conventions that are used to organize content and files. This includes file names, key coding files, metadata tagging of blogs, styling tooling for blogs, etc. | . Development Environment Setup . Comprehensive start. A topic-by-topic guide to getting this project running is published here. . Quick start. A quick start below is a reminder, but is dependent on your knowledge. Only follow this instruction if you need a refresher. Always default to the comprehensive start if any problem occurs. . Clone Repo . Run these commands to obtain the project, then locate into the project directory with the terminal, install an extensive set of tools, and make. . git clone &lt;this-repo&gt; # git clone https://github.com/nighthawkcoders/student_2025.git cd &lt;repo-dir&gt;/scripts # cd student_2025 . Windows WSL and/or Ubuntu Users . Execute the script: ./activate_ubuntu.sh | . macOS Users . Execute the script: ./activate_macos.sh | . Kasm Cloud Desktop Users . Execute the script: ./activate.sh | . Run Server on localhost . To preview the project you will need to ‚Äúmake‚Äù the project. . Bundle install . The very first time you clone run project you will need to run this Ruby command as the final part of your setup. . bundle install . Start the Server . This requires running terminal commands make, make stop, make clean, or make convert to manage the running server. Logging of details will appear in the terminal. A Makefile has been created in the project to support commands and start processes. . Start the server, this is the best choice for initial and iterative development. Note. after the initial make, you should see files automatically refresh in the terminal on VSCode save. . make . Load web application into the Browser . Start the preview server in the terminal, The terminal output from make shows the server address. ‚ÄúCmd‚Äù or ‚ÄúCtl‚Äù click the http location to open the preview server in a browser. Here is an example Server address message, click on the Server address to load:‚Ä¶ . http://0.0.0.0:4100/student_2025/ . Regeneration of web application . Save on ‚Äú.ipynb‚Äù or ‚Äú.md‚Äù file activiates ‚Äúregeneration‚Äù. An example terminal message is below. Refresh the browser to see updates after the message displays. . Regenerating: 1 file(s) changed at 2023-07-31 06:54:32 _notebooks/2024-01-04-cockpit-setup.ipynb . Other ‚Äúmake‚Äù commands . Terminal messages are generated from background processes. At any time, click return or enter in a terminal window to obtain a prompt. Once you have the prompt you can use the terminal as needed for other tasks. Always return to the root of project cd ~/vscode/student_2025 for all ‚Äúmake‚Äù actions. . Stop the preview server . Stopping the server ends the web server applications running process. However, it leaves constructed files in the project in a ready state for the next time you run make. . make stop . Clean the local web application environment . This command will top the server and ‚Äúclean‚Äù all previously constructed files (ie .ipynb -&gt; .md). This is the best choice when renaming files has created duplicates that are visible when previewing work. . make clean . Observe build errors . Test Jupyter Notebook conversions (ie .ipynb -&gt; .md), this is the best choice to see if an IPYNB conversion error is occurring. . make convert . . Development Support . File Names in ‚Äú_posts‚Äù, ‚Äú_notebooks‚Äù . There are two primary directories for creating blogs. The ‚Äú_posts‚Äù directory is for authoring in markdown only. The ‚Äú_notebooks‚Äù allows for markdown, pythons, javascript and more. . To name a file, use the following structure (If dates are in the future, review your config.yml setting if you want them to be viewed). Review these naming conventions. . For markdown files in _posts: year-month-day-fileName.md GOOD EXAMPLE: 2021-08-02-First-Day.md | BAD EXAMPLE: 2021-8-2-first-day.md | BAD EXAMPLE: first-day.md | BAD EXAMPLE: 2069-12-31-First-Day.md | . | . | For Jupyter notebooks in _notebooks: year-month-day-fileName.ipynb GOOD EXAMPLE: 2021-08-02-First-Day.ipynb | BAD EXAMPLE: 2021-8-2-first-day.ipynb | BAD EXAMPLE: first-day.ipynb | BAD EXAMPLE: 2069-12-31-First-Day.ipynb | . | . | . Tags . Tags are used to organize pages by their tag the way to add tags is to add the following to your front matter such as the example seen here categories: [Tools] Each item in the same category will be lumped together to be seen easily on the search page. . Search . All pages can be searched for using the built-in search bar. This search bar will search for any word in the title of a page or in the page itself. This allows for easily finding pages and information that you are looking for. However, sometimes this may not be desirable so to hide a page from the search you need to add search_exclude: true to the front matter of the page. This will hide the page from appearing when the viewer uses search. . Navigation Bar . To add pages to the top navigation bar use _config.yml to order and determine which menus you want and how to order them. Review the_config.yml in this project for an example. . Blog Page . There is a blog page that has options for images and a description of the page. This page can help the viewer understand what the page is about and what they can expect to find on the page. The way to add images to a page is to have the following front matter image: /images/file.jpg and then the name of the image that you want to use. The image must be in the images folder. Furthermore, if you would like the file to not show up on the blog page hide: true can be added to the front matter. . SASS support . NIGHTHAWK Pages support a variety of different themes that are each overlaid on top of minima. To use each theme, go to the ‚Äú_sass/minima/custom-styles.scss‚Äù file and simply comment or uncomment the theme you want to use. . To learn about the minima themes search for ‚ÄúGitHub Pages minima‚Äù and review the README. . To find a new theme search for ‚ÄúGithub Pages Themes‚Äù. . Includes . Nighthawk Pages uses liquid syntax to import many common page elements that are present throughout the repository. These common elements are imported from the _includes directory. If you want to add one of these common elements, use liquid syntax to import the desired element to your file. Here‚Äôs an example of the liquid syntax used to import: `&lt;h3&gt; . &lt;/a&gt; . | . &lt;/h3&gt;&lt;p class=&quot;post-meta&quot;&gt;&lt;/p&gt; ` Note that the liquid syntax is surrounded by curly braces and percent signs. This can be used anywhere in the repository. . Layouts . To use or create a custom page layout, make an HTML page inside the _layouts directory, and when you want to use that layout in a file, use the following front matter layout: [your layout here]. All layouts will be written in liquid to define the structure of the page. | . Metadata . Metadata, also known as ‚Äúfront matter‚Äù, is a set of key-value pairs that can provide additional information to GitHub Pages about .md and .ipynb files. This can and probably will be used in other file types (ie doc, pdf) if we add them to the system. . In the front matter, you can also define things like a title and description for the page. Additional front matter is defined to place content on the ‚ÄúComputer Science Lab Notebook‚Äù page. The courses: key will place data on a specific page with the nested week: placing data on a specific row on the page. The type: key in ‚Äúfront matter‚Äù will place the blog under the plans, hacks(ToDo), and tangibles columns. . In our files, the front matter is defined at the top of the page or the first markdown cell. . First, open one of the .md or .ipynb files already included in either your _posts | _notebooks folder. | . | In the .md file, you should notice something similar to this at the top of the page. To see this in your .ipynb files you will need to double-click the markdown cell at the top of the file. | . toc: true comments: true layout: post title: Jupyter Python Sample description: Example Blog!!! This shows code and notes from hacks. type: ccc courses: { csa: {week: 5} } . | The front matter will always have ‚Äò‚Äî‚Äô at the top and bottom to distinguish it and each key-value pair will be separated by a ‚Äò:‚Äô. . | Here we can modify things like the title and description. . | The type value will tell us which column this is going to appear under the time box supported pages. The ‚Äúccc‚Äù stands for Code, Code, Code. . | The courses will tell us which menu item it will be under, in this case, the csa menu, and the week tells it what row (week) it will appear under that menu. . | .",
          "url": "http://localhost:4100/adi_student/README4YML.html",
          "relUrl": "/README4YML.html",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "About",
          "content": "About Me . Generated: . . In addition to my professional pursuits, I am passionate about cybersecurity, machine learning, and game development. I thrive on innovation and entrepreneurship, continuously seeking ways to drive technological advancements and contribute to the greater good. . When I‚Äôm not at work, I enjoy exploring new challenges in Python development, particularly in data analysis and signal processing. I also have a strong interest in education, guiding young learners in their journey to understanding complex tech concepts. . Outside of technology, I love traveling, with Cancun being one of my favorite destinations, and I play the Tenor Saxophone as a hobby. . .",
          "url": "http://localhost:4100/adi_student/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
      ,"page4": {
          "title": "Cookie Clicker",
          "content": "Cookie Clicker . Cookies: 0 . . Shop . Buy Clicker (Cost: 10 Clickers) . You have 0 workers. . Buy Factory (Cost: 500 Cookies) . You have 0 factories. .",
          "url": "http://localhost:4100/adi_student/cookie/",
          "relUrl": "/cookie/",
          "date": ""
      }
      
  

  
      ,"page5": {
          "title": "",
          "content": ". . Click here to view my journey setting up GitHub Pages: . My Journey . Jupyter Notebooks . Notebooks Fruits Model Emoji Fun! . Rooooooooooter1!!!! . Enter first number: . . Enter second number: . . Add Subtract Divide Multiply . . The links are not switched. . Click me to switch links! Link #1 Link #2 . Press space to play snake! . Snake Color: Food Color: . Get a Joke! . Press the button to see a joke!",
          "url": "http://localhost:4100/adi_student/",
          "relUrl": "/",
          "date": ""
      }
      
  

  
      ,"page6": {
          "title": "My Journey",
          "content": "Introduction . Welcome to my adventure through the jungle of development tools and the setup of Nighthawk Pages. Just like a monkey swinging from vine to vine, I navigated through the dense forest of code, tools, and technologies, each step bringing me closer to mastering my digital environment. . üñ•Ô∏è The Setup . üêæ The Jungle Path: Initial Setup . My journey began with setting up the basic tools needed to survive in this coding jungle: . Laptop Ready: My trusty laptop, the basecamp of my journey, was prepped and ready. Whether swinging on MacOS trees or scaling Windows cliffs, I ensured it was equipped with all necessary tools. | GitHub Account: The first vine I swung onto was creating a GitHub account, my central hub for all coding activities. This would be where I store my bananas of code and collaborate with other jungle explorers. | Visual Studio Code: My machete in the jungle, Visual Studio Code, was installed. With its various extensions, I was able to cut through the thick undergrowth of coding challenges. | . üçå Navigating the Code Canopy . Next, I began exploring the canopy of coding languages: . JavaScript, Python, and Java: Like a monkey with a banana, I quickly grasped the essentials of these languages, each providing a different flavor of coding. I learned to create, analyze, and deploy my projects with agility. | Jupyter Notebooks: A clearing in the jungle where I could pause, reflect, and document my journey. Jupyter Notebooks became my journal, where I captured the intricacies of my coding adventures. | . üöÄ Deploying in the Jungle . ü¶ú Flying High: Publishing with GitHub Pages . Once my coding tools were sharp and ready, it was time to deploy my creations. With the help of GitHub Pages, I showcased my projects, swinging through the vines of the web, leaving a trail of my progress for others to see. . üêç Python Packages and üß© Java Packages . The jungle is full of hidden treasures‚ÄîPython and Java packages. With the pip and pom.xml tools, I added these pre-written codes to my arsenal, making my journey more efficient and enjoyable. . üí¨ Collaborating with Fellow Explorers . ü¶Å Roar of the Jungle: Communication and Collaboration . No monkey survives alone. Through constant communication in Slack, I kept in touch with my fellow explorers, sharing tips and strategies on how to navigate this jungle. We worked together, just like a troop of monkeys, ensuring that no one was left behind. . üõ†Ô∏è Tools and Projects: Agile/Scrum Methodology . Understanding the importance of collaboration, I dived into Agile/Scrum methodologies. By using GitHub Issues and Projects, I learned how to work effectively within a team, planning our journey and making sure we reached our goals together. . Conclusion . My monkey-and-jungle-themed journey through the setup of Nighthawk Pages has been an exhilarating experience. From swinging through the vines of code to exploring the depths of collaboration, I‚Äôve learned how to survive and thrive in this digital jungle. This journey is just the beginning, and I‚Äôm excited to continue exploring and mastering new territories in the vast jungle of technology. .",
          "url": "http://localhost:4100/adi_student/journey/",
          "relUrl": "/journey/",
          "date": ""
      }
      
  

  
  

  
  

  

  
      ,"page10": {
          "title": "",
          "content": "@charset ‚Äúutf-8‚Äù; . // Our variables $base-font-family: ‚ÄúPT Sans‚Äù, Helvetica, Arial, sans-serif; $base-font-size: 16px; $base-font-weight: 400; $small-font-size: $base-font-size * 0.875; $base-line-height: 1.5; . $spacing-unit: 30px; // Width of the content area $content-width: 800px; . $on-palm: 600px; $on-laptop: 800px; . // Use media queries like this: // @include media-query($on-palm) { // .wrapper { // padding-right: $spacing-unit / 2; // padding-left: $spacing-unit / 2; // } // } @mixin media-query($device) { @media screen and (max-width: $device) { @content; } } . // Import partials from sass_dir (defaults to _sass) @import ‚Äúbase‚Äù, ‚Äúlayout‚Äù, ‚Äúsyntax-highlighting‚Äù, ‚Äúcolor‚Äù ; . /** . Reset some basic elements */ body, h1, h2, h3, h4, h5, h6, p, blockquote, pre, hr, dl, dd, ol, ul, figure { margin: 0; padding: 0; } | . /** . Basic styling */ body { font: $base-font-weight #{$base-font-size}/#{$base-line-height} $base-font-family; -webkit-text-size-adjust: 100%; -webkit-font-feature-settings: ‚Äúkern‚Äù 1; -moz-font-feature-settings: ‚Äúkern‚Äù 1; -o-font-feature-settings: ‚Äúkern‚Äù 1; font-feature-settings: ‚Äúkern‚Äù 1; font-kerning: normal; } | . /** . Set margin-bottom to maintain vertical rhythm */ h1, h2, h3, h4, h5, h6, p, blockquote, pre, ul, ol, dl, figure, %vertical-rhythm { margin-bottom: $spacing-unit / 2; } | . /** . Images */ img { max-width: 100%; vertical-align: middle; } | . /** . Figures */ figure &gt; img { display: block; } | . figcaption { font-size: $small-font-size; } . /** . Lists */ ul, ol { margin-left: $spacing-unit; } | . li { &gt; ul, &gt; ol { margin-bottom: 0; } } . /** . Headings */ h1, h2, h3, h4, h5, h6 { font-weight: $base-font-weight; } | . /** . Links */ a { text-decoration: none; . &amp;:hover { border-bottom: 1px dotted; } . &amp;.page-link:hover { border-bottom: 1px dotted; } &amp;.postLink:hover{ border-bottom: 1px dotted; } &amp;.post-title-link:hover{ border-bottom: 1px dotted !important; } } . | . /** . Blockquotes */ blockquote { border-left: 4px solid; padding-left: $spacing-unit / 2; font-size: 18px; letter-spacing: -1px; font-style: italic; . :last-child { margin-bottom: 0; } } . | . /** . Code formatting */ pre, code { font-size: 15px; border: 1px solid; border-radius: 3px; } | . code { padding: 1px 5px; } . pre { padding: 8px 12px; overflow-x: auto; . &gt; code { border: 0; padding-right: 0; padding-left: 0; } } . /** . Wrapper */ .wrapper { max-width: -webkit-calc(#{$content-width} - (#{$spacing-unit} * 2)); max-width: calc(#{$content-width} - (#{$spacing-unit} * 2)); margin-right: auto; margin-left: auto; padding-right: $spacing-unit; padding-left: $spacing-unit; @extend %clearfix; . @include media-query($on-laptop) { max-width: -webkit-calc(#{$content-width} - (#{$spacing-unit})); max-width: calc(#{$content-width} - (#{$spacing-unit})); padding-right: $spacing-unit / 2; padding-left: $spacing-unit / 2; } } . | . /** . Clearfix */ %clearfix { . &amp;:after { content: ‚Äú‚Äù; display: table; clear: both; } } . | . /** . Icons */ .icon { . svg { display: inline-block; width: 16px; height: 16px; vertical-align: middle; } } . | . .post { font-family: ‚ÄúSource Sans Pro‚Äù; font-size: 18px; font-weight: 300; padding-top: 0; } .home{ padding-bottom: 5em; } .download { padding: 10px; } .authorKeyword { text-transform: uppercase; font-size: 16px; letter-spacing: 2px; text-indent: 2px; padding-top:0.5em; } .writtenBy { letter-spacing: 0; text-indent: 0; text-transform: uppercase; } .archive-intro { font-size: 14px; text-transform: uppercase; letter-spacing: 2px; text-indent: 2px; } .archiveIntro { text-align: center; } .hint { text-transform: uppercase; font-size: 11px; letter-spacing: 2px; text-indent: 2px; } .example { font-family: ‚ÄòMenlo‚Äô; padding: 10px; } .manual { text-transform: uppercase; font-size: 16px; letter-spacing: 2px; text-indent: 2px; } .postContent { padding-top: 3.5em; text-align: center; } .postDate { float: left; text-transform: uppercase; font-family: ‚ÄúSource Sans Pro‚Äù; font-size: 16px; font-weight: 300; letter-spacing: 2px; text-indent: 2px; } .postTag { float: right; } .postTitle { font-weight: 400; text-align: center; text-transform: uppercase; letter-spacing: 3px; text-indent: 3px; } /** . Site header */ .site-header { border-top: 5px solid; border-bottom: 1px solid; min-height: 56px; // Positioning context for the mobile navigation icon position: relative; } .site-title { font-size: 64px; font-weight: 100; font-family: ‚ÄòPT Sans‚Äô; text-transform: capitalize; font-weight: 500; margin-top: 1em; } .site-description { font-size: 14px; letter-spacing: 2px; text-indent: 6px; font-family: ‚ÄòJosefin Sans‚Äô; } .exclamationMark { padding-left: 2em; padding-right: 2em; } .site-navigation { text-transform: uppercase; font-size: 14px; letter-spacing: 2px; text-indent: 6px; font-family: ‚ÄòJosefin Sans‚Äô; font-weight: 300; padding-top: 5em; } .page-title { text-transform: uppercase; letter-spacing: 2px; text-indent: 2px; font-family: ‚ÄúPT Sans‚Äù; font-size: 12px; text-align:center; } .page-tagline { font-size: 18px; font-family: ‚ÄúPT Sans‚Äù; text-align: center; text-transform: lowercase; } .site-nav { .page-link { line-height: $base-line-height; // Gaps between nav items, but not on the last one &amp;:not(:last-child) { margin-right: 20px; } } @include media-query($on-palm) { position: absolute; top: 9px; right: $spacing-unit / 2; border-radius: 5px; text-align: right; .menu-icon { display: block; float: right; width: 36px; height: 26px; line-height: 0; padding-top: 10px; text-align: center; svg { width: 18px; height: 15px; } } .trigger { clear: both; display: none; } &amp;:hover .trigger { display: block; padding-bottom: 5px; } .page-link { display: block; padding: 5px 10px; &amp;:not(:last-child) { margin-right: 0; } margin-left: 20px; } } } /** . | Site footer */ .site-footer { border-top: 1px solid; padding: $spacing-unit 0; } .footer-heading { font-size: 18px; margin-bottom: $spacing-unit / 2; } .contact-list, .social-media-list { list-style: none; margin-left: 0; } .small-site-title { font-family: ‚ÄúPT Sans‚Äù; } .footer-col-wrapper { font-size: 15px; margin-left: -$spacing-unit / 2; @extend %clearfix; } .footer-content { font-family: ‚ÄúJosefin Sans‚Äù; font-weight: 300; letter-spacing: 1px; } .footer-col { float: left; margin-bottom: $spacing-unit / 2; padding-left: $spacing-unit / 2; } .footer-col-1 { width: -webkit-calc(35% - (#{$spacing-unit} / 2)); width: calc(35% - (#{$spacing-unit} / 2)); } .footer-col-2 { width: -webkit-calc(20% - (#{$spacing-unit} / 2)); width: calc(20% - (#{$spacing-unit} / 2)); } .footer-col-3 { width: -webkit-calc(45% - (#{$spacing-unit} / 2)); width: calc(45% - (#{$spacing-unit} / 2)); } @include media-query($on-laptop) { .footer-col-1, .footer-col-2 { width: -webkit-calc(50% - (#{$spacing-unit} / 2)); width: calc(50% - (#{$spacing-unit} / 2)); } .footer-col-3 { width: -webkit-calc(100% - (#{$spacing-unit} / 2)); width: calc(100% - (#{$spacing-unit} / 2)); } } @include media-query($on-palm) { .footer-col { float: none; width: -webkit-calc(100% - (#{$spacing-unit} / 2)); width: calc(100% - (#{$spacing-unit} / 2)); } } /** | Page content */ .page-content { padding: 0; } .page-heading { font-size: 20px; } .post-list { margin-left: 0; list-style: none; li { margin-bottom: $spacing-unit; } } .post-meta { font-size: $small-font-size; text-transform: uppercase; font-size: 16px; } .post-link { display: block; font-size: 24px; } /** . | Posts */ .post-header { margin-bottom: $spacing-unit; } .post-title { font-size: 62px; | . text-align: center; font-family: ‚ÄúPT Sans‚Äù; font-weight: 900; @include media-query($on-laptop) { font-size: 36px; } } .post-content { margin-bottom: $spacing-unit; padding-bottom: 3em !important; p { font-size: 1.5rem; } h2 { font-size: 32px; @include media-query($on-laptop) { font-size: 28px; } } h3 { font-size: 26px; @include media-query($on-laptop) { font-size: 22px; } } h4 { font-size: 20px; @include media-query($on-laptop) { font-size: 18px; } } } . /** . Pagination */ .pagination { padding-top: 3.5em; text-align: center; } .paginationLink { border: 0; display: inline-block; padding: 5px; text-decoration: none; transition: color 200ms ease-out; . &amp;:hover, &amp;:active, &amp;:focus { border: 0; } } .paginationLinkCurrent { font-style: normal; } . | . .postNavigation { align-items: center; display: flex; justify-content: space-between; padding-bottom: 3em; . a:only-child { width: 100%; } } .postPrev, .postNext { display: inline-block; width: 49%; &amp;:hover, &amp;:active, &amp;:focus { border: 0; } } .postNext { text-align: right; } . /** . Syntax highlighting styles */ .highlight { @extend %vertical-rhythm; . .c { color: #998; font-style: italic } // Comment .err { color: #a61717; background-color: #e3d2d2 } // Error .k { font-weight: bold } // Keyword .o { font-weight: bold } // Operator .cm { color: #998; font-style: italic } // Comment.Multiline .cp { color: #999; font-weight: bold } // Comment.Preproc .c1 { color: #998; font-style: italic } // Comment.Single .cs { color: #999; font-weight: bold; font-style: italic } // Comment.Special .gd { color: #000; background-color: #fdd } // Generic.Deleted .gd .x { color: #000; background-color: #faa } // Generic.Deleted.Specific .ge { font-style: italic } // Generic.Emph .gr { color: #a00 } // Generic.Error .gh { color: #999 } // Generic.Heading .gi { color: #000; background-color: #dfd } // Generic.Inserted .gi .x { color: #000; background-color: #afa } // Generic.Inserted.Specific .go { color: #888 } // Generic.Output .gp { color: #555 } // Generic.Prompt .gs { font-weight: bold } // Generic.Strong .gu { color: #aaa } // Generic.Subheading .gt { color: #a00 } // Generic.Traceback .kc { font-weight: bold } // Keyword.Constant .kd { font-weight: bold } // Keyword.Declaration .kp { font-weight: bold } // Keyword.Pseudo .kr { font-weight: bold } // Keyword.Reserved .kt { color: #458; font-weight: bold } // Keyword.Type .m { color: #099 } // Literal.Number .s { color: #d14 } // Literal.String .na { color: #008080 } // Name.Attribute .nb { color: #0086B3 } // Name.Builtin .nc { color: #458; font-weight: bold } // Name.Class .no { color: #008080 } // Name.Constant .ni { color: #800080 } // Name.Entity .ne { color: #900; font-weight: bold } // Name.Exception .nf { color: #900; font-weight: bold } // Name.Function .nn { color: #555 } // Name.Namespace .nt { color: #000080 } // Name.Tag .nv { color: #008080 } // Name.Variable .ow { font-weight: bold } // Operator.Word .w { color: #bbb } // Text.Whitespace .mf { color: #099 } // Literal.Number.Float .mh { color: #099 } // Literal.Number.Hex .mi { color: #099 } // Literal.Number.Integer .mo { color: #099 } // Literal.Number.Oct .sb { color: #d14 } // Literal.String.Backtick .sc { color: #d14 } // Literal.String.Char .sd { color: #d14 } // Literal.String.Doc .s2 { color: #d14 } // Literal.String.Double .se { color: #d14 } // Literal.String.Escape .sh { color: #d14 } // Literal.String.Heredoc .si { color: #d14 } // Literal.String.Interpol .sx { color: #d14 } // Literal.String.Other .sr { color: #009926 } // Literal.String.Regex .s1 { color: #d14 } // Literal.String.Single .ss { color: #990073 } // Literal.String.Symbol .bp { color: #999 } // Name.Builtin.Pseudo .vc { color: #008080 } // Name.Variable.Class .vg { color: #008080 } // Name.Variable.Global .vi { color: #008080 } // Name.Variable.Instance .il { color: #099 } // Literal.Number.Integer.Long } . | .",
          "url": "http://localhost:4100/adi_student/css/style.css",
          "relUrl": "/css/style.css",
          "date": ""
      }
      
  

  
  

  
  

  
      ,"page13": {
          "title": "",
          "content": "Silk icon set 1.3 by Mark James mjames@gmail.com . http://www.famfamfam.com/lab/icons/silk/ . License: CC-BY-2.5 or CC-BY-3.0 .",
          "url": "http://localhost:4100/adi_student/venv/lib/python3.10/site-packages/werkzeug/debug/shared/ICON_LICENSE.html",
          "relUrl": "/venv/lib/python3.10/site-packages/werkzeug/debug/shared/ICON_LICENSE.html",
          "date": ""
      }
      
  

  
      ,"page14": {
          "title": "",
          "content": "Silk icon set 1.3 by Mark James mjames@gmail.com . http://www.famfamfam.com/lab/icons/silk/ . License: CC-BY-2.5 or CC-BY-3.0 .",
          "url": "http://localhost:4100/adi_student/venv/lib64/python3.10/site-packages/werkzeug/debug/shared/ICON_LICENSE.html",
          "relUrl": "/venv/lib64/python3.10/site-packages/werkzeug/debug/shared/ICON_LICENSE.html",
          "date": ""
      }
      
  

  
      ,"page15": {
          "title": "Implementation Notes for Internationalization of Jupyter Notebook",
          "content": "Implementation Notes for Internationalization of Jupyter Notebook . The implementation of i18n features for jupyter notebook is still a work-in-progress: . User interface strings are (mostly) handled | Console messages are not handled (their usefulness in a translated environment is questionable) | Tooling has to be refined | . However‚Ä¶ . How the language is selected ? . jupyter notebook command reads the LANG environment variable at startup, (xx_XX or just xx form, where xx is the language code you‚Äôre wanting to run in). | Hint: if running Windows, you can set it in PowerShell with ${Env:LANG} = &quot;xx_XX&quot;. if running Ubuntu 14, you should set environment variable LANGUAGE=&quot;xx_XX&quot;. . The preferred language for web pages in your browser settings (xx) is also used. At the moment, it has to be first in the list. | Contributing and managing translations . Requirements . pybabel (could be installed pip install babel) | po2json (could be installed with npm install -g po2json) | . All i18n-related commands are done from the related directory : . cd notebook/i18n/ . Message extraction . The translatable material for notebook is split into 3 .pot files, as follows: . notebook/i18n/notebook.pot - Console and startup messages, basically anything that is produced by Python code. | notebook/i18n/nbui.pot - User interface strings, as extracted from the Jinja2 templates in notebook/templates/*.html | noteook/i18n/nbjs.pot - JavaScript strings and dialogs, which contain much of the visible user interface for Jupyter notebook. | . To extract the messages from the source code whenever new material is added, use the pybabel command: . pybabel extract -F babel_notebook.cfg -o notebook.pot --no-wrap --project Jupyter . pybabel extract -F babel_nbui.cfg -o nbui.pot --no-wrap --project Jupyter . pybabel extract -F babel_nbjs.cfg -o nbjs.pot --no-wrap --project Jupyter . . After this is complete you have 3 .pot files that you can give to a translator for your favorite language. . Messages compilation . After the source material has been translated, you should have 3 .po files with the same base names as the .pot files above. Put them in notebook/i18n/${LANG}/LC_MESSAGES, where ${LANG} is the language code for your desired language ( i.e. German = ‚Äúde‚Äù, Japanese = ‚Äúja‚Äù, etc. ). . notebook.po and nbui.po need to be converted from .po to .mo format for use at runtime. . pybabel compile -D notebook -f -l ${LANG} -i ${LANG}/LC_MESSAGES/notebook.po -o ${LANG}/LC_MESSAGES/notebook.mo pybabel compile -D nbui -f -l ${LANG} -i ${LANG}/LC_MESSAGES/nbui.po -o ${LANG}/LC_MESSAGES/nbui.mo . nbjs.po needs to be converted to JSON for use within the JavaScript code, with po2json, as follows: . po2json -p -F -f jed1.x -d nbjs ${LANG}/LC_MESSAGES/nbjs.po ${LANG}/LC_MESSAGES/nbjs.json . When new languages get added, their language codes should be added to notebook/i18n/nbjs.json under the supported_languages element. . Tips for Jupyter developers . The biggest ‚Äúmistake‚Äù I found while doing i18n enablement was the habit of constructing UI messages from English ‚Äúpiece parts‚Äù. For example, code like: . var msg = &quot;Enter a new &quot; + type + &quot;name:&quot;; . where type is either ‚Äúfile‚Äù, ‚Äúdirectory‚Äù, or ‚Äúnotebook‚Äù‚Ä¶. . is problematic when doing translations, because the surrounding text may need to vary depending on the inserted word. In this case, you need to switch it and use complete phrases, as follows: . var rename_msg = function (type) { switch (type) { case &quot;file&quot;: return _(&quot;Enter a new file name:&quot;); case &quot;directory&quot;: return _(&quot;Enter a new directory name:&quot;); case &quot;notebook&quot;: return _(&quot;Enter a new notebook name:&quot;); default: return _(&quot;Enter a new name:&quot;); } }; . Also you need to remember that adding an ‚Äús‚Äù or ‚Äúes‚Äù to an English word to create the plural form doesn‚Äôt translate well. Some languages have as many as 5 or 6 different plural forms for differing numbers, so using an API such as ngettext() is necessary in order to handle these cases properly. . Known issues and future evolutions . Right now there are two different places where the desired language is set. At startup time, the Jupyter console‚Äôs messages pay attention to the setting of the ${LANG} environment variable as set in the shell at startup time. Unfortunately, this is also the time where the Jinja2 environment is set up, which means that the template stuff will always come from this setting. We really want to be paying attention to the browser‚Äôs settings for the stuff that happens in the browser, so we need to be able to retrieve this information after the browser is started and somehow communicate this back to Jinja2. So far, I haven‚Äôt yet figured out how to do this, which means that if the ${LANG} at startup doesn‚Äôt match the browser‚Äôs settings, you could potentially get a mix of languages in the UI ( never a good thing ). . | We will need to decide if console messages should be translatable, and enable them if desired. . | The keyboard shortcut editor was implemented after the i18n work was completed, so that portion does not have translation support at this time. . | Babel‚Äôs documentation has instructions on how to integrate messages extraction into your setup.py so that eventually we can just do: . ./setup.py extract_messages . | I hope to get this working at some point in the near future. 5. The conversions from .po to .mo probably can and should be done using setup.py install. . Any questions or comments please let me know @JCEmmons on github (emmo@us.ibm.com) .",
          "url": "http://localhost:4100/adi_student/venv/lib/python3.10/site-packages/jupyter_server/i18n/",
          "relUrl": "/venv/lib/python3.10/site-packages/jupyter_server/i18n/",
          "date": ""
      }
      
  

  
      ,"page16": {
          "title": "README FIRST",
          "content": "README FIRST . Please do not add new templates for nbconvert here. . In order to speed up the distribution of nbconvert templates and make it simpler to share such contributions, we encourage sharing those links on our wiki page. .",
          "url": "http://localhost:4100/adi_student/venv/lib/python3.10/site-packages/nbconvert/templates/",
          "relUrl": "/venv/lib/python3.10/site-packages/nbconvert/templates/",
          "date": ""
      }
      
  

  
      ,"page17": {
          "title": "Template skeleton",
          "content": "Template skeleton . This directory contains the template skeleton files. . Do not modify the contents of the ../latex/skeleton folder. Instead, if you need to, make modifications to the files in this folder and then run make to generate the corresponding latex skeleton files in the ../latex/skeleton folder. . If you would like to share your resulting templates with others, we encourage sharing those links on our wiki page. .",
          "url": "http://localhost:4100/adi_student/venv/lib/python3.10/site-packages/nbconvert/templates/skeleton/",
          "relUrl": "/venv/lib/python3.10/site-packages/nbconvert/templates/skeleton/",
          "date": ""
      }
      
  

  
      ,"page18": {
          "title": "",
          "content": "PyZMQ‚Äôs CFFI support is designed only for (Unix) systems conforming to have_sys_un_h = True. .",
          "url": "http://localhost:4100/adi_student/venv/lib/python3.10/site-packages/zmq/backend/cffi/",
          "relUrl": "/venv/lib/python3.10/site-packages/zmq/backend/cffi/",
          "date": ""
      }
      
  

  
      ,"page19": {
          "title": "Implementation Notes for Internationalization of Jupyter Notebook",
          "content": "Implementation Notes for Internationalization of Jupyter Notebook . The implementation of i18n features for jupyter notebook is still a work-in-progress: . User interface strings are (mostly) handled | Console messages are not handled (their usefulness in a translated environment is questionable) | Tooling has to be refined | . However‚Ä¶ . How the language is selected ? . jupyter notebook command reads the LANG environment variable at startup, (xx_XX or just xx form, where xx is the language code you‚Äôre wanting to run in). | Hint: if running Windows, you can set it in PowerShell with ${Env:LANG} = &quot;xx_XX&quot;. if running Ubuntu 14, you should set environment variable LANGUAGE=&quot;xx_XX&quot;. . The preferred language for web pages in your browser settings (xx) is also used. At the moment, it has to be first in the list. | Contributing and managing translations . Requirements . pybabel (could be installed pip install babel) | po2json (could be installed with npm install -g po2json) | . All i18n-related commands are done from the related directory : . cd notebook/i18n/ . Message extraction . The translatable material for notebook is split into 3 .pot files, as follows: . notebook/i18n/notebook.pot - Console and startup messages, basically anything that is produced by Python code. | notebook/i18n/nbui.pot - User interface strings, as extracted from the Jinja2 templates in notebook/templates/*.html | noteook/i18n/nbjs.pot - JavaScript strings and dialogs, which contain much of the visible user interface for Jupyter notebook. | . To extract the messages from the source code whenever new material is added, use the pybabel command: . pybabel extract -F babel_notebook.cfg -o notebook.pot --no-wrap --project Jupyter . pybabel extract -F babel_nbui.cfg -o nbui.pot --no-wrap --project Jupyter . pybabel extract -F babel_nbjs.cfg -o nbjs.pot --no-wrap --project Jupyter . . After this is complete you have 3 .pot files that you can give to a translator for your favorite language. . Messages compilation . After the source material has been translated, you should have 3 .po files with the same base names as the .pot files above. Put them in notebook/i18n/${LANG}/LC_MESSAGES, where ${LANG} is the language code for your desired language ( i.e. German = ‚Äúde‚Äù, Japanese = ‚Äúja‚Äù, etc. ). . notebook.po and nbui.po need to be converted from .po to .mo format for use at runtime. . pybabel compile -D notebook -f -l ${LANG} -i ${LANG}/LC_MESSAGES/notebook.po -o ${LANG}/LC_MESSAGES/notebook.mo pybabel compile -D nbui -f -l ${LANG} -i ${LANG}/LC_MESSAGES/nbui.po -o ${LANG}/LC_MESSAGES/nbui.mo . nbjs.po needs to be converted to JSON for use within the JavaScript code, with po2json, as follows: . po2json -p -F -f jed1.x -d nbjs ${LANG}/LC_MESSAGES/nbjs.po ${LANG}/LC_MESSAGES/nbjs.json . When new languages get added, their language codes should be added to notebook/i18n/nbjs.json under the supported_languages element. . Tips for Jupyter developers . The biggest ‚Äúmistake‚Äù I found while doing i18n enablement was the habit of constructing UI messages from English ‚Äúpiece parts‚Äù. For example, code like: . var msg = &quot;Enter a new &quot; + type + &quot;name:&quot;; . where type is either ‚Äúfile‚Äù, ‚Äúdirectory‚Äù, or ‚Äúnotebook‚Äù‚Ä¶. . is problematic when doing translations, because the surrounding text may need to vary depending on the inserted word. In this case, you need to switch it and use complete phrases, as follows: . var rename_msg = function (type) { switch (type) { case &quot;file&quot;: return _(&quot;Enter a new file name:&quot;); case &quot;directory&quot;: return _(&quot;Enter a new directory name:&quot;); case &quot;notebook&quot;: return _(&quot;Enter a new notebook name:&quot;); default: return _(&quot;Enter a new name:&quot;); } }; . Also you need to remember that adding an ‚Äús‚Äù or ‚Äúes‚Äù to an English word to create the plural form doesn‚Äôt translate well. Some languages have as many as 5 or 6 different plural forms for differing numbers, so using an API such as ngettext() is necessary in order to handle these cases properly. . Known issues and future evolutions . Right now there are two different places where the desired language is set. At startup time, the Jupyter console‚Äôs messages pay attention to the setting of the ${LANG} environment variable as set in the shell at startup time. Unfortunately, this is also the time where the Jinja2 environment is set up, which means that the template stuff will always come from this setting. We really want to be paying attention to the browser‚Äôs settings for the stuff that happens in the browser, so we need to be able to retrieve this information after the browser is started and somehow communicate this back to Jinja2. So far, I haven‚Äôt yet figured out how to do this, which means that if the ${LANG} at startup doesn‚Äôt match the browser‚Äôs settings, you could potentially get a mix of languages in the UI ( never a good thing ). . | We will need to decide if console messages should be translatable, and enable them if desired. . | The keyboard shortcut editor was implemented after the i18n work was completed, so that portion does not have translation support at this time. . | Babel‚Äôs documentation has instructions on how to integrate messages extraction into your setup.py so that eventually we can just do: . ./setup.py extract_messages . | I hope to get this working at some point in the near future. 5. The conversions from .po to .mo probably can and should be done using setup.py install. . Any questions or comments please let me know @JCEmmons on github (emmo@us.ibm.com) .",
          "url": "http://localhost:4100/adi_student/venv/lib64/python3.10/site-packages/jupyter_server/i18n/",
          "relUrl": "/venv/lib64/python3.10/site-packages/jupyter_server/i18n/",
          "date": ""
      }
      
  

  
      ,"page20": {
          "title": "README FIRST",
          "content": "README FIRST . Please do not add new templates for nbconvert here. . In order to speed up the distribution of nbconvert templates and make it simpler to share such contributions, we encourage sharing those links on our wiki page. .",
          "url": "http://localhost:4100/adi_student/venv/lib64/python3.10/site-packages/nbconvert/templates/",
          "relUrl": "/venv/lib64/python3.10/site-packages/nbconvert/templates/",
          "date": ""
      }
      
  

  
      ,"page21": {
          "title": "Template skeleton",
          "content": "Template skeleton . This directory contains the template skeleton files. . Do not modify the contents of the ../latex/skeleton folder. Instead, if you need to, make modifications to the files in this folder and then run make to generate the corresponding latex skeleton files in the ../latex/skeleton folder. . If you would like to share your resulting templates with others, we encourage sharing those links on our wiki page. .",
          "url": "http://localhost:4100/adi_student/venv/lib64/python3.10/site-packages/nbconvert/templates/skeleton/",
          "relUrl": "/venv/lib64/python3.10/site-packages/nbconvert/templates/skeleton/",
          "date": ""
      }
      
  

  
      ,"page22": {
          "title": "",
          "content": "PyZMQ‚Äôs CFFI support is designed only for (Unix) systems conforming to have_sys_un_h = True. .",
          "url": "http://localhost:4100/adi_student/venv/lib64/python3.10/site-packages/zmq/backend/cffi/",
          "relUrl": "/venv/lib64/python3.10/site-packages/zmq/backend/cffi/",
          "date": ""
      }
      
  

}